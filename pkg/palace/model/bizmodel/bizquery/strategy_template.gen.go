// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package bizquery

import (
	"context"

	"github.com/aide-family/moon/pkg/palace/model/bizmodel"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newStrategyTemplate(db *gorm.DB, opts ...gen.DOOption) strategyTemplate {
	_strategyTemplate := strategyTemplate{}

	_strategyTemplate.strategyTemplateDo.UseDB(db, opts...)
	_strategyTemplate.strategyTemplateDo.UseModel(&bizmodel.StrategyTemplate{})

	tableName := _strategyTemplate.strategyTemplateDo.TableName()
	_strategyTemplate.ALL = field.NewAsterisk(tableName)
	_strategyTemplate.ID = field.NewUint32(tableName, "id")
	_strategyTemplate.CreatedAt = field.NewField(tableName, "created_at")
	_strategyTemplate.UpdatedAt = field.NewField(tableName, "updated_at")
	_strategyTemplate.DeletedAt = field.NewUint(tableName, "deleted_at")
	_strategyTemplate.Alert = field.NewString(tableName, "alert")
	_strategyTemplate.Expr = field.NewString(tableName, "expr")
	_strategyTemplate.For = field.NewField(tableName, "for")
	_strategyTemplate.Count_ = field.NewUint32(tableName, "count")
	_strategyTemplate.SustainType = field.NewInt(tableName, "sustain_type")
	_strategyTemplate.Labels = field.NewField(tableName, "labels")
	_strategyTemplate.Annotations = field.NewField(tableName, "annotations")
	_strategyTemplate.Interval = field.NewField(tableName, "interval")
	_strategyTemplate.Remark = field.NewString(tableName, "remark")
	_strategyTemplate.CreatorID = field.NewUint32(tableName, "creator")
	_strategyTemplate.Status = field.NewInt(tableName, "status")
	_strategyTemplate.Creator = strategyTemplateBelongsToCreator{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Creator", "bizmodel.SysTeamMember"),
		TeamRoles: struct {
			field.RelationField
			Apis struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Creator.TeamRoles", "bizmodel.SysTeamRole"),
			Apis: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Creator.TeamRoles.Apis", "bizmodel.SysTeamAPI"),
			},
		},
	}

	_strategyTemplate.fillFieldMap()

	return _strategyTemplate
}

type strategyTemplate struct {
	strategyTemplateDo

	ALL         field.Asterisk
	ID          field.Uint32
	CreatedAt   field.Field
	UpdatedAt   field.Field
	DeletedAt   field.Uint
	Alert       field.String
	Expr        field.String
	For         field.Field
	Count_      field.Uint32
	SustainType field.Int
	Labels      field.Field
	Annotations field.Field
	Interval    field.Field
	Remark      field.String
	CreatorID   field.Uint32
	Status      field.Int
	Creator     strategyTemplateBelongsToCreator

	fieldMap map[string]field.Expr
}

func (s strategyTemplate) Table(newTableName string) *strategyTemplate {
	s.strategyTemplateDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s strategyTemplate) As(alias string) *strategyTemplate {
	s.strategyTemplateDo.DO = *(s.strategyTemplateDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *strategyTemplate) updateTableName(table string) *strategyTemplate {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint32(table, "id")
	s.CreatedAt = field.NewField(table, "created_at")
	s.UpdatedAt = field.NewField(table, "updated_at")
	s.DeletedAt = field.NewUint(table, "deleted_at")
	s.Alert = field.NewString(table, "alert")
	s.Expr = field.NewString(table, "expr")
	s.For = field.NewField(table, "for")
	s.Count_ = field.NewUint32(table, "count")
	s.SustainType = field.NewInt(table, "sustain_type")
	s.Labels = field.NewField(table, "labels")
	s.Annotations = field.NewField(table, "annotations")
	s.Interval = field.NewField(table, "interval")
	s.Remark = field.NewString(table, "remark")
	s.CreatorID = field.NewUint32(table, "creator")
	s.Status = field.NewInt(table, "status")

	s.fillFieldMap()

	return s
}

func (s *strategyTemplate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *strategyTemplate) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 16)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["alert"] = s.Alert
	s.fieldMap["expr"] = s.Expr
	s.fieldMap["for"] = s.For
	s.fieldMap["count"] = s.Count_
	s.fieldMap["sustain_type"] = s.SustainType
	s.fieldMap["labels"] = s.Labels
	s.fieldMap["annotations"] = s.Annotations
	s.fieldMap["interval"] = s.Interval
	s.fieldMap["remark"] = s.Remark
	s.fieldMap["creator"] = s.CreatorID
	s.fieldMap["status"] = s.Status

}

func (s strategyTemplate) clone(db *gorm.DB) strategyTemplate {
	s.strategyTemplateDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s strategyTemplate) replaceDB(db *gorm.DB) strategyTemplate {
	s.strategyTemplateDo.ReplaceDB(db)
	return s
}

type strategyTemplateBelongsToCreator struct {
	db *gorm.DB

	field.RelationField

	TeamRoles struct {
		field.RelationField
		Apis struct {
			field.RelationField
		}
	}
}

func (a strategyTemplateBelongsToCreator) Where(conds ...field.Expr) *strategyTemplateBelongsToCreator {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a strategyTemplateBelongsToCreator) WithContext(ctx context.Context) *strategyTemplateBelongsToCreator {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a strategyTemplateBelongsToCreator) Session(session *gorm.Session) *strategyTemplateBelongsToCreator {
	a.db = a.db.Session(session)
	return &a
}

func (a strategyTemplateBelongsToCreator) Model(m *bizmodel.StrategyTemplate) *strategyTemplateBelongsToCreatorTx {
	return &strategyTemplateBelongsToCreatorTx{a.db.Model(m).Association(a.Name())}
}

type strategyTemplateBelongsToCreatorTx struct{ tx *gorm.Association }

func (a strategyTemplateBelongsToCreatorTx) Find() (result *bizmodel.SysTeamMember, err error) {
	return result, a.tx.Find(&result)
}

func (a strategyTemplateBelongsToCreatorTx) Append(values ...*bizmodel.SysTeamMember) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a strategyTemplateBelongsToCreatorTx) Replace(values ...*bizmodel.SysTeamMember) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a strategyTemplateBelongsToCreatorTx) Delete(values ...*bizmodel.SysTeamMember) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a strategyTemplateBelongsToCreatorTx) Clear() error {
	return a.tx.Clear()
}

func (a strategyTemplateBelongsToCreatorTx) Count() int64 {
	return a.tx.Count()
}

type strategyTemplateDo struct{ gen.DO }

type IStrategyTemplateDo interface {
	gen.SubQuery
	Debug() IStrategyTemplateDo
	WithContext(ctx context.Context) IStrategyTemplateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStrategyTemplateDo
	WriteDB() IStrategyTemplateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStrategyTemplateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStrategyTemplateDo
	Not(conds ...gen.Condition) IStrategyTemplateDo
	Or(conds ...gen.Condition) IStrategyTemplateDo
	Select(conds ...field.Expr) IStrategyTemplateDo
	Where(conds ...gen.Condition) IStrategyTemplateDo
	Order(conds ...field.Expr) IStrategyTemplateDo
	Distinct(cols ...field.Expr) IStrategyTemplateDo
	Omit(cols ...field.Expr) IStrategyTemplateDo
	Join(table schema.Tabler, on ...field.Expr) IStrategyTemplateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStrategyTemplateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStrategyTemplateDo
	Group(cols ...field.Expr) IStrategyTemplateDo
	Having(conds ...gen.Condition) IStrategyTemplateDo
	Limit(limit int) IStrategyTemplateDo
	Offset(offset int) IStrategyTemplateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStrategyTemplateDo
	Unscoped() IStrategyTemplateDo
	Create(values ...*bizmodel.StrategyTemplate) error
	CreateInBatches(values []*bizmodel.StrategyTemplate, batchSize int) error
	Save(values ...*bizmodel.StrategyTemplate) error
	First() (*bizmodel.StrategyTemplate, error)
	Take() (*bizmodel.StrategyTemplate, error)
	Last() (*bizmodel.StrategyTemplate, error)
	Find() ([]*bizmodel.StrategyTemplate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*bizmodel.StrategyTemplate, err error)
	FindInBatches(result *[]*bizmodel.StrategyTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*bizmodel.StrategyTemplate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStrategyTemplateDo
	Assign(attrs ...field.AssignExpr) IStrategyTemplateDo
	Joins(fields ...field.RelationField) IStrategyTemplateDo
	Preload(fields ...field.RelationField) IStrategyTemplateDo
	FirstOrInit() (*bizmodel.StrategyTemplate, error)
	FirstOrCreate() (*bizmodel.StrategyTemplate, error)
	FindByPage(offset int, limit int) (result []*bizmodel.StrategyTemplate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStrategyTemplateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s strategyTemplateDo) Debug() IStrategyTemplateDo {
	return s.withDO(s.DO.Debug())
}

func (s strategyTemplateDo) WithContext(ctx context.Context) IStrategyTemplateDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s strategyTemplateDo) ReadDB() IStrategyTemplateDo {
	return s.Clauses(dbresolver.Read)
}

func (s strategyTemplateDo) WriteDB() IStrategyTemplateDo {
	return s.Clauses(dbresolver.Write)
}

func (s strategyTemplateDo) Session(config *gorm.Session) IStrategyTemplateDo {
	return s.withDO(s.DO.Session(config))
}

func (s strategyTemplateDo) Clauses(conds ...clause.Expression) IStrategyTemplateDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s strategyTemplateDo) Returning(value interface{}, columns ...string) IStrategyTemplateDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s strategyTemplateDo) Not(conds ...gen.Condition) IStrategyTemplateDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s strategyTemplateDo) Or(conds ...gen.Condition) IStrategyTemplateDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s strategyTemplateDo) Select(conds ...field.Expr) IStrategyTemplateDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s strategyTemplateDo) Where(conds ...gen.Condition) IStrategyTemplateDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s strategyTemplateDo) Order(conds ...field.Expr) IStrategyTemplateDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s strategyTemplateDo) Distinct(cols ...field.Expr) IStrategyTemplateDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s strategyTemplateDo) Omit(cols ...field.Expr) IStrategyTemplateDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s strategyTemplateDo) Join(table schema.Tabler, on ...field.Expr) IStrategyTemplateDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s strategyTemplateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStrategyTemplateDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s strategyTemplateDo) RightJoin(table schema.Tabler, on ...field.Expr) IStrategyTemplateDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s strategyTemplateDo) Group(cols ...field.Expr) IStrategyTemplateDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s strategyTemplateDo) Having(conds ...gen.Condition) IStrategyTemplateDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s strategyTemplateDo) Limit(limit int) IStrategyTemplateDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s strategyTemplateDo) Offset(offset int) IStrategyTemplateDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s strategyTemplateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStrategyTemplateDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s strategyTemplateDo) Unscoped() IStrategyTemplateDo {
	return s.withDO(s.DO.Unscoped())
}

func (s strategyTemplateDo) Create(values ...*bizmodel.StrategyTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s strategyTemplateDo) CreateInBatches(values []*bizmodel.StrategyTemplate, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s strategyTemplateDo) Save(values ...*bizmodel.StrategyTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s strategyTemplateDo) First() (*bizmodel.StrategyTemplate, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*bizmodel.StrategyTemplate), nil
	}
}

func (s strategyTemplateDo) Take() (*bizmodel.StrategyTemplate, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*bizmodel.StrategyTemplate), nil
	}
}

func (s strategyTemplateDo) Last() (*bizmodel.StrategyTemplate, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*bizmodel.StrategyTemplate), nil
	}
}

func (s strategyTemplateDo) Find() ([]*bizmodel.StrategyTemplate, error) {
	result, err := s.DO.Find()
	return result.([]*bizmodel.StrategyTemplate), err
}

func (s strategyTemplateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*bizmodel.StrategyTemplate, err error) {
	buf := make([]*bizmodel.StrategyTemplate, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s strategyTemplateDo) FindInBatches(result *[]*bizmodel.StrategyTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s strategyTemplateDo) Attrs(attrs ...field.AssignExpr) IStrategyTemplateDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s strategyTemplateDo) Assign(attrs ...field.AssignExpr) IStrategyTemplateDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s strategyTemplateDo) Joins(fields ...field.RelationField) IStrategyTemplateDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s strategyTemplateDo) Preload(fields ...field.RelationField) IStrategyTemplateDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s strategyTemplateDo) FirstOrInit() (*bizmodel.StrategyTemplate, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*bizmodel.StrategyTemplate), nil
	}
}

func (s strategyTemplateDo) FirstOrCreate() (*bizmodel.StrategyTemplate, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*bizmodel.StrategyTemplate), nil
	}
}

func (s strategyTemplateDo) FindByPage(offset int, limit int) (result []*bizmodel.StrategyTemplate, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s strategyTemplateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s strategyTemplateDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s strategyTemplateDo) Delete(models ...*bizmodel.StrategyTemplate) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *strategyTemplateDo) withDO(do gen.Dao) *strategyTemplateDo {
	s.DO = *do.(*gen.DO)
	return s
}
