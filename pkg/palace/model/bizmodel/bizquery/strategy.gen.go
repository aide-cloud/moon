// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package bizquery

import (
	"context"

	"github.com/aide-family/moon/pkg/palace/model/bizmodel"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newStrategy(db *gorm.DB, opts ...gen.DOOption) strategy {
	_strategy := strategy{}

	_strategy.strategyDo.UseDB(db, opts...)
	_strategy.strategyDo.UseModel(&bizmodel.Strategy{})

	tableName := _strategy.strategyDo.TableName()
	_strategy.ALL = field.NewAsterisk(tableName)
	_strategy.ID = field.NewUint32(tableName, "id")
	_strategy.CreatedAt = field.NewField(tableName, "created_at")
	_strategy.UpdatedAt = field.NewField(tableName, "updated_at")
	_strategy.DeletedAt = field.NewUint(tableName, "deleted_at")
	_strategy.Alert = field.NewString(tableName, "alert")
	_strategy.Expr = field.NewString(tableName, "expr")
	_strategy.For = field.NewField(tableName, "for")
	_strategy.Count_ = field.NewUint32(tableName, "count")
	_strategy.SustainType = field.NewInt(tableName, "sustain_type")
	_strategy.Labels = field.NewField(tableName, "labels")
	_strategy.Annotations = field.NewField(tableName, "annotations")
	_strategy.Interval = field.NewField(tableName, "interval")
	_strategy.Remark = field.NewString(tableName, "remark")
	_strategy.CreatorID = field.NewUint32(tableName, "creator")
	_strategy.Status = field.NewInt(tableName, "status")
	_strategy.Creator = strategyBelongsToCreator{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Creator", "bizmodel.SysTeamMember"),
		TeamRoles: struct {
			field.RelationField
			Apis struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Creator.TeamRoles", "bizmodel.SysTeamRole"),
			Apis: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Creator.TeamRoles.Apis", "bizmodel.SysTeamAPI"),
			},
		},
	}

	_strategy.Datasource = strategyManyToManyDatasource{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Datasource", "bizmodel.Datasource"),
		Metrics: struct {
			field.RelationField
			Labels struct {
				field.RelationField
				LabelValues struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Datasource.Metrics", "bizmodel.DatasourceMetric"),
			Labels: struct {
				field.RelationField
				LabelValues struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Datasource.Metrics.Labels", "bizmodel.MetricLabel"),
				LabelValues: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Datasource.Metrics.Labels.LabelValues", "bizmodel.MetricLabelValue"),
				},
			},
		},
	}

	_strategy.fillFieldMap()

	return _strategy
}

type strategy struct {
	strategyDo

	ALL         field.Asterisk
	ID          field.Uint32
	CreatedAt   field.Field
	UpdatedAt   field.Field
	DeletedAt   field.Uint
	Alert       field.String
	Expr        field.String
	For         field.Field
	Count_      field.Uint32
	SustainType field.Int
	Labels      field.Field
	Annotations field.Field
	Interval    field.Field
	Remark      field.String
	CreatorID   field.Uint32
	Status      field.Int
	Creator     strategyBelongsToCreator

	Datasource strategyManyToManyDatasource

	fieldMap map[string]field.Expr
}

func (s strategy) Table(newTableName string) *strategy {
	s.strategyDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s strategy) As(alias string) *strategy {
	s.strategyDo.DO = *(s.strategyDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *strategy) updateTableName(table string) *strategy {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint32(table, "id")
	s.CreatedAt = field.NewField(table, "created_at")
	s.UpdatedAt = field.NewField(table, "updated_at")
	s.DeletedAt = field.NewUint(table, "deleted_at")
	s.Alert = field.NewString(table, "alert")
	s.Expr = field.NewString(table, "expr")
	s.For = field.NewField(table, "for")
	s.Count_ = field.NewUint32(table, "count")
	s.SustainType = field.NewInt(table, "sustain_type")
	s.Labels = field.NewField(table, "labels")
	s.Annotations = field.NewField(table, "annotations")
	s.Interval = field.NewField(table, "interval")
	s.Remark = field.NewString(table, "remark")
	s.CreatorID = field.NewUint32(table, "creator")
	s.Status = field.NewInt(table, "status")

	s.fillFieldMap()

	return s
}

func (s *strategy) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *strategy) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 17)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["alert"] = s.Alert
	s.fieldMap["expr"] = s.Expr
	s.fieldMap["for"] = s.For
	s.fieldMap["count"] = s.Count_
	s.fieldMap["sustain_type"] = s.SustainType
	s.fieldMap["labels"] = s.Labels
	s.fieldMap["annotations"] = s.Annotations
	s.fieldMap["interval"] = s.Interval
	s.fieldMap["remark"] = s.Remark
	s.fieldMap["creator"] = s.CreatorID
	s.fieldMap["status"] = s.Status

}

func (s strategy) clone(db *gorm.DB) strategy {
	s.strategyDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s strategy) replaceDB(db *gorm.DB) strategy {
	s.strategyDo.ReplaceDB(db)
	return s
}

type strategyBelongsToCreator struct {
	db *gorm.DB

	field.RelationField

	TeamRoles struct {
		field.RelationField
		Apis struct {
			field.RelationField
		}
	}
}

func (a strategyBelongsToCreator) Where(conds ...field.Expr) *strategyBelongsToCreator {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a strategyBelongsToCreator) WithContext(ctx context.Context) *strategyBelongsToCreator {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a strategyBelongsToCreator) Session(session *gorm.Session) *strategyBelongsToCreator {
	a.db = a.db.Session(session)
	return &a
}

func (a strategyBelongsToCreator) Model(m *bizmodel.Strategy) *strategyBelongsToCreatorTx {
	return &strategyBelongsToCreatorTx{a.db.Model(m).Association(a.Name())}
}

type strategyBelongsToCreatorTx struct{ tx *gorm.Association }

func (a strategyBelongsToCreatorTx) Find() (result *bizmodel.SysTeamMember, err error) {
	return result, a.tx.Find(&result)
}

func (a strategyBelongsToCreatorTx) Append(values ...*bizmodel.SysTeamMember) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a strategyBelongsToCreatorTx) Replace(values ...*bizmodel.SysTeamMember) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a strategyBelongsToCreatorTx) Delete(values ...*bizmodel.SysTeamMember) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a strategyBelongsToCreatorTx) Clear() error {
	return a.tx.Clear()
}

func (a strategyBelongsToCreatorTx) Count() int64 {
	return a.tx.Count()
}

type strategyManyToManyDatasource struct {
	db *gorm.DB

	field.RelationField

	Metrics struct {
		field.RelationField
		Labels struct {
			field.RelationField
			LabelValues struct {
				field.RelationField
			}
		}
	}
}

func (a strategyManyToManyDatasource) Where(conds ...field.Expr) *strategyManyToManyDatasource {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a strategyManyToManyDatasource) WithContext(ctx context.Context) *strategyManyToManyDatasource {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a strategyManyToManyDatasource) Session(session *gorm.Session) *strategyManyToManyDatasource {
	a.db = a.db.Session(session)
	return &a
}

func (a strategyManyToManyDatasource) Model(m *bizmodel.Strategy) *strategyManyToManyDatasourceTx {
	return &strategyManyToManyDatasourceTx{a.db.Model(m).Association(a.Name())}
}

type strategyManyToManyDatasourceTx struct{ tx *gorm.Association }

func (a strategyManyToManyDatasourceTx) Find() (result []*bizmodel.Datasource, err error) {
	return result, a.tx.Find(&result)
}

func (a strategyManyToManyDatasourceTx) Append(values ...*bizmodel.Datasource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a strategyManyToManyDatasourceTx) Replace(values ...*bizmodel.Datasource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a strategyManyToManyDatasourceTx) Delete(values ...*bizmodel.Datasource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a strategyManyToManyDatasourceTx) Clear() error {
	return a.tx.Clear()
}

func (a strategyManyToManyDatasourceTx) Count() int64 {
	return a.tx.Count()
}

type strategyDo struct{ gen.DO }

type IStrategyDo interface {
	gen.SubQuery
	Debug() IStrategyDo
	WithContext(ctx context.Context) IStrategyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStrategyDo
	WriteDB() IStrategyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStrategyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStrategyDo
	Not(conds ...gen.Condition) IStrategyDo
	Or(conds ...gen.Condition) IStrategyDo
	Select(conds ...field.Expr) IStrategyDo
	Where(conds ...gen.Condition) IStrategyDo
	Order(conds ...field.Expr) IStrategyDo
	Distinct(cols ...field.Expr) IStrategyDo
	Omit(cols ...field.Expr) IStrategyDo
	Join(table schema.Tabler, on ...field.Expr) IStrategyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStrategyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStrategyDo
	Group(cols ...field.Expr) IStrategyDo
	Having(conds ...gen.Condition) IStrategyDo
	Limit(limit int) IStrategyDo
	Offset(offset int) IStrategyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStrategyDo
	Unscoped() IStrategyDo
	Create(values ...*bizmodel.Strategy) error
	CreateInBatches(values []*bizmodel.Strategy, batchSize int) error
	Save(values ...*bizmodel.Strategy) error
	First() (*bizmodel.Strategy, error)
	Take() (*bizmodel.Strategy, error)
	Last() (*bizmodel.Strategy, error)
	Find() ([]*bizmodel.Strategy, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*bizmodel.Strategy, err error)
	FindInBatches(result *[]*bizmodel.Strategy, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*bizmodel.Strategy) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStrategyDo
	Assign(attrs ...field.AssignExpr) IStrategyDo
	Joins(fields ...field.RelationField) IStrategyDo
	Preload(fields ...field.RelationField) IStrategyDo
	FirstOrInit() (*bizmodel.Strategy, error)
	FirstOrCreate() (*bizmodel.Strategy, error)
	FindByPage(offset int, limit int) (result []*bizmodel.Strategy, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStrategyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s strategyDo) Debug() IStrategyDo {
	return s.withDO(s.DO.Debug())
}

func (s strategyDo) WithContext(ctx context.Context) IStrategyDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s strategyDo) ReadDB() IStrategyDo {
	return s.Clauses(dbresolver.Read)
}

func (s strategyDo) WriteDB() IStrategyDo {
	return s.Clauses(dbresolver.Write)
}

func (s strategyDo) Session(config *gorm.Session) IStrategyDo {
	return s.withDO(s.DO.Session(config))
}

func (s strategyDo) Clauses(conds ...clause.Expression) IStrategyDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s strategyDo) Returning(value interface{}, columns ...string) IStrategyDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s strategyDo) Not(conds ...gen.Condition) IStrategyDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s strategyDo) Or(conds ...gen.Condition) IStrategyDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s strategyDo) Select(conds ...field.Expr) IStrategyDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s strategyDo) Where(conds ...gen.Condition) IStrategyDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s strategyDo) Order(conds ...field.Expr) IStrategyDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s strategyDo) Distinct(cols ...field.Expr) IStrategyDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s strategyDo) Omit(cols ...field.Expr) IStrategyDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s strategyDo) Join(table schema.Tabler, on ...field.Expr) IStrategyDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s strategyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStrategyDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s strategyDo) RightJoin(table schema.Tabler, on ...field.Expr) IStrategyDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s strategyDo) Group(cols ...field.Expr) IStrategyDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s strategyDo) Having(conds ...gen.Condition) IStrategyDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s strategyDo) Limit(limit int) IStrategyDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s strategyDo) Offset(offset int) IStrategyDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s strategyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStrategyDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s strategyDo) Unscoped() IStrategyDo {
	return s.withDO(s.DO.Unscoped())
}

func (s strategyDo) Create(values ...*bizmodel.Strategy) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s strategyDo) CreateInBatches(values []*bizmodel.Strategy, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s strategyDo) Save(values ...*bizmodel.Strategy) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s strategyDo) First() (*bizmodel.Strategy, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*bizmodel.Strategy), nil
	}
}

func (s strategyDo) Take() (*bizmodel.Strategy, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*bizmodel.Strategy), nil
	}
}

func (s strategyDo) Last() (*bizmodel.Strategy, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*bizmodel.Strategy), nil
	}
}

func (s strategyDo) Find() ([]*bizmodel.Strategy, error) {
	result, err := s.DO.Find()
	return result.([]*bizmodel.Strategy), err
}

func (s strategyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*bizmodel.Strategy, err error) {
	buf := make([]*bizmodel.Strategy, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s strategyDo) FindInBatches(result *[]*bizmodel.Strategy, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s strategyDo) Attrs(attrs ...field.AssignExpr) IStrategyDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s strategyDo) Assign(attrs ...field.AssignExpr) IStrategyDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s strategyDo) Joins(fields ...field.RelationField) IStrategyDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s strategyDo) Preload(fields ...field.RelationField) IStrategyDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s strategyDo) FirstOrInit() (*bizmodel.Strategy, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*bizmodel.Strategy), nil
	}
}

func (s strategyDo) FirstOrCreate() (*bizmodel.Strategy, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*bizmodel.Strategy), nil
	}
}

func (s strategyDo) FindByPage(offset int, limit int) (result []*bizmodel.Strategy, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s strategyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s strategyDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s strategyDo) Delete(models ...*bizmodel.Strategy) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *strategyDo) withDO(do gen.Dao) *strategyDo {
	s.DO = *do.(*gen.DO)
	return s
}
