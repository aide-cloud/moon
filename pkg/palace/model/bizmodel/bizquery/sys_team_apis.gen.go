// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package bizquery

import (
	"context"

	"github.com/aide-family/moon/pkg/palace/model/bizmodel"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newSysTeamAPI(db *gorm.DB, opts ...gen.DOOption) sysTeamAPI {
	_sysTeamAPI := sysTeamAPI{}

	_sysTeamAPI.sysTeamAPIDo.UseDB(db, opts...)
	_sysTeamAPI.sysTeamAPIDo.UseModel(&bizmodel.SysTeamAPI{})

	tableName := _sysTeamAPI.sysTeamAPIDo.TableName()
	_sysTeamAPI.ALL = field.NewAsterisk(tableName)
	_sysTeamAPI.ID = field.NewUint32(tableName, "id")
	_sysTeamAPI.CreatedAt = field.NewField(tableName, "created_at")
	_sysTeamAPI.UpdatedAt = field.NewField(tableName, "updated_at")
	_sysTeamAPI.DeletedAt = field.NewUint(tableName, "deleted_at")
	_sysTeamAPI.Name = field.NewString(tableName, "name")
	_sysTeamAPI.Path = field.NewString(tableName, "path")
	_sysTeamAPI.Status = field.NewInt(tableName, "status")
	_sysTeamAPI.Remark = field.NewString(tableName, "remark")
	_sysTeamAPI.Module = field.NewInt32(tableName, "module")
	_sysTeamAPI.Domain = field.NewInt32(tableName, "domain")

	_sysTeamAPI.fillFieldMap()

	return _sysTeamAPI
}

type sysTeamAPI struct {
	sysTeamAPIDo

	ALL       field.Asterisk
	ID        field.Uint32
	CreatedAt field.Field
	UpdatedAt field.Field
	DeletedAt field.Uint
	Name      field.String
	Path      field.String
	Status    field.Int
	Remark    field.String
	Module    field.Int32
	Domain    field.Int32

	fieldMap map[string]field.Expr
}

func (s sysTeamAPI) Table(newTableName string) *sysTeamAPI {
	s.sysTeamAPIDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysTeamAPI) As(alias string) *sysTeamAPI {
	s.sysTeamAPIDo.DO = *(s.sysTeamAPIDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysTeamAPI) updateTableName(table string) *sysTeamAPI {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint32(table, "id")
	s.CreatedAt = field.NewField(table, "created_at")
	s.UpdatedAt = field.NewField(table, "updated_at")
	s.DeletedAt = field.NewUint(table, "deleted_at")
	s.Name = field.NewString(table, "name")
	s.Path = field.NewString(table, "path")
	s.Status = field.NewInt(table, "status")
	s.Remark = field.NewString(table, "remark")
	s.Module = field.NewInt32(table, "module")
	s.Domain = field.NewInt32(table, "domain")

	s.fillFieldMap()

	return s
}

func (s *sysTeamAPI) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysTeamAPI) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["name"] = s.Name
	s.fieldMap["path"] = s.Path
	s.fieldMap["status"] = s.Status
	s.fieldMap["remark"] = s.Remark
	s.fieldMap["module"] = s.Module
	s.fieldMap["domain"] = s.Domain
}

func (s sysTeamAPI) clone(db *gorm.DB) sysTeamAPI {
	s.sysTeamAPIDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysTeamAPI) replaceDB(db *gorm.DB) sysTeamAPI {
	s.sysTeamAPIDo.ReplaceDB(db)
	return s
}

type sysTeamAPIDo struct{ gen.DO }

type ISysTeamAPIDo interface {
	gen.SubQuery
	Debug() ISysTeamAPIDo
	WithContext(ctx context.Context) ISysTeamAPIDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysTeamAPIDo
	WriteDB() ISysTeamAPIDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysTeamAPIDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysTeamAPIDo
	Not(conds ...gen.Condition) ISysTeamAPIDo
	Or(conds ...gen.Condition) ISysTeamAPIDo
	Select(conds ...field.Expr) ISysTeamAPIDo
	Where(conds ...gen.Condition) ISysTeamAPIDo
	Order(conds ...field.Expr) ISysTeamAPIDo
	Distinct(cols ...field.Expr) ISysTeamAPIDo
	Omit(cols ...field.Expr) ISysTeamAPIDo
	Join(table schema.Tabler, on ...field.Expr) ISysTeamAPIDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysTeamAPIDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysTeamAPIDo
	Group(cols ...field.Expr) ISysTeamAPIDo
	Having(conds ...gen.Condition) ISysTeamAPIDo
	Limit(limit int) ISysTeamAPIDo
	Offset(offset int) ISysTeamAPIDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysTeamAPIDo
	Unscoped() ISysTeamAPIDo
	Create(values ...*bizmodel.SysTeamAPI) error
	CreateInBatches(values []*bizmodel.SysTeamAPI, batchSize int) error
	Save(values ...*bizmodel.SysTeamAPI) error
	First() (*bizmodel.SysTeamAPI, error)
	Take() (*bizmodel.SysTeamAPI, error)
	Last() (*bizmodel.SysTeamAPI, error)
	Find() ([]*bizmodel.SysTeamAPI, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*bizmodel.SysTeamAPI, err error)
	FindInBatches(result *[]*bizmodel.SysTeamAPI, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*bizmodel.SysTeamAPI) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysTeamAPIDo
	Assign(attrs ...field.AssignExpr) ISysTeamAPIDo
	Joins(fields ...field.RelationField) ISysTeamAPIDo
	Preload(fields ...field.RelationField) ISysTeamAPIDo
	FirstOrInit() (*bizmodel.SysTeamAPI, error)
	FirstOrCreate() (*bizmodel.SysTeamAPI, error)
	FindByPage(offset int, limit int) (result []*bizmodel.SysTeamAPI, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysTeamAPIDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysTeamAPIDo) Debug() ISysTeamAPIDo {
	return s.withDO(s.DO.Debug())
}

func (s sysTeamAPIDo) WithContext(ctx context.Context) ISysTeamAPIDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysTeamAPIDo) ReadDB() ISysTeamAPIDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysTeamAPIDo) WriteDB() ISysTeamAPIDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysTeamAPIDo) Session(config *gorm.Session) ISysTeamAPIDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysTeamAPIDo) Clauses(conds ...clause.Expression) ISysTeamAPIDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysTeamAPIDo) Returning(value interface{}, columns ...string) ISysTeamAPIDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysTeamAPIDo) Not(conds ...gen.Condition) ISysTeamAPIDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysTeamAPIDo) Or(conds ...gen.Condition) ISysTeamAPIDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysTeamAPIDo) Select(conds ...field.Expr) ISysTeamAPIDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysTeamAPIDo) Where(conds ...gen.Condition) ISysTeamAPIDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysTeamAPIDo) Order(conds ...field.Expr) ISysTeamAPIDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysTeamAPIDo) Distinct(cols ...field.Expr) ISysTeamAPIDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysTeamAPIDo) Omit(cols ...field.Expr) ISysTeamAPIDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysTeamAPIDo) Join(table schema.Tabler, on ...field.Expr) ISysTeamAPIDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysTeamAPIDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysTeamAPIDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysTeamAPIDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysTeamAPIDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysTeamAPIDo) Group(cols ...field.Expr) ISysTeamAPIDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysTeamAPIDo) Having(conds ...gen.Condition) ISysTeamAPIDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysTeamAPIDo) Limit(limit int) ISysTeamAPIDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysTeamAPIDo) Offset(offset int) ISysTeamAPIDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysTeamAPIDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysTeamAPIDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysTeamAPIDo) Unscoped() ISysTeamAPIDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysTeamAPIDo) Create(values ...*bizmodel.SysTeamAPI) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysTeamAPIDo) CreateInBatches(values []*bizmodel.SysTeamAPI, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysTeamAPIDo) Save(values ...*bizmodel.SysTeamAPI) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysTeamAPIDo) First() (*bizmodel.SysTeamAPI, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*bizmodel.SysTeamAPI), nil
	}
}

func (s sysTeamAPIDo) Take() (*bizmodel.SysTeamAPI, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*bizmodel.SysTeamAPI), nil
	}
}

func (s sysTeamAPIDo) Last() (*bizmodel.SysTeamAPI, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*bizmodel.SysTeamAPI), nil
	}
}

func (s sysTeamAPIDo) Find() ([]*bizmodel.SysTeamAPI, error) {
	result, err := s.DO.Find()
	return result.([]*bizmodel.SysTeamAPI), err
}

func (s sysTeamAPIDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*bizmodel.SysTeamAPI, err error) {
	buf := make([]*bizmodel.SysTeamAPI, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysTeamAPIDo) FindInBatches(result *[]*bizmodel.SysTeamAPI, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysTeamAPIDo) Attrs(attrs ...field.AssignExpr) ISysTeamAPIDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysTeamAPIDo) Assign(attrs ...field.AssignExpr) ISysTeamAPIDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysTeamAPIDo) Joins(fields ...field.RelationField) ISysTeamAPIDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysTeamAPIDo) Preload(fields ...field.RelationField) ISysTeamAPIDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysTeamAPIDo) FirstOrInit() (*bizmodel.SysTeamAPI, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*bizmodel.SysTeamAPI), nil
	}
}

func (s sysTeamAPIDo) FirstOrCreate() (*bizmodel.SysTeamAPI, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*bizmodel.SysTeamAPI), nil
	}
}

func (s sysTeamAPIDo) FindByPage(offset int, limit int) (result []*bizmodel.SysTeamAPI, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysTeamAPIDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysTeamAPIDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysTeamAPIDo) Delete(models ...*bizmodel.SysTeamAPI) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysTeamAPIDo) withDO(do gen.Dao) *sysTeamAPIDo {
	s.DO = *do.(*gen.DO)
	return s
}
