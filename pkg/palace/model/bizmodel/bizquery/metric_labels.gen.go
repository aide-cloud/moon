// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package bizquery

import (
	"context"

	"github.com/aide-family/moon/pkg/palace/model/bizmodel"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newMetricLabel(db *gorm.DB, opts ...gen.DOOption) metricLabel {
	_metricLabel := metricLabel{}

	_metricLabel.metricLabelDo.UseDB(db, opts...)
	_metricLabel.metricLabelDo.UseModel(&bizmodel.MetricLabel{})

	tableName := _metricLabel.metricLabelDo.TableName()
	_metricLabel.ALL = field.NewAsterisk(tableName)
	_metricLabel.ID = field.NewUint32(tableName, "id")
	_metricLabel.Name = field.NewString(tableName, "name")
	_metricLabel.MetricID = field.NewUint32(tableName, "metric_id")
	_metricLabel.CreatedAt = field.NewField(tableName, "created_at")
	_metricLabel.UpdatedAt = field.NewField(tableName, "updated_at")
	_metricLabel.DeletedAt = field.NewUint(tableName, "deleted_at")
	_metricLabel.Remark = field.NewString(tableName, "remark")
	_metricLabel.LabelValues = metricLabelHasManyLabelValues{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("LabelValues", "bizmodel.MetricLabelValue"),
	}

	_metricLabel.fillFieldMap()

	return _metricLabel
}

type metricLabel struct {
	metricLabelDo

	ALL         field.Asterisk
	ID          field.Uint32
	Name        field.String
	MetricID    field.Uint32
	CreatedAt   field.Field
	UpdatedAt   field.Field
	DeletedAt   field.Uint
	Remark      field.String
	LabelValues metricLabelHasManyLabelValues

	fieldMap map[string]field.Expr
}

func (m metricLabel) Table(newTableName string) *metricLabel {
	m.metricLabelDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m metricLabel) As(alias string) *metricLabel {
	m.metricLabelDo.DO = *(m.metricLabelDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *metricLabel) updateTableName(table string) *metricLabel {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint32(table, "id")
	m.Name = field.NewString(table, "name")
	m.MetricID = field.NewUint32(table, "metric_id")
	m.CreatedAt = field.NewField(table, "created_at")
	m.UpdatedAt = field.NewField(table, "updated_at")
	m.DeletedAt = field.NewUint(table, "deleted_at")
	m.Remark = field.NewString(table, "remark")

	m.fillFieldMap()

	return m
}

func (m *metricLabel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *metricLabel) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 8)
	m.fieldMap["id"] = m.ID
	m.fieldMap["name"] = m.Name
	m.fieldMap["metric_id"] = m.MetricID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["remark"] = m.Remark

}

func (m metricLabel) clone(db *gorm.DB) metricLabel {
	m.metricLabelDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m metricLabel) replaceDB(db *gorm.DB) metricLabel {
	m.metricLabelDo.ReplaceDB(db)
	return m
}

type metricLabelHasManyLabelValues struct {
	db *gorm.DB

	field.RelationField
}

func (a metricLabelHasManyLabelValues) Where(conds ...field.Expr) *metricLabelHasManyLabelValues {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a metricLabelHasManyLabelValues) WithContext(ctx context.Context) *metricLabelHasManyLabelValues {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a metricLabelHasManyLabelValues) Session(session *gorm.Session) *metricLabelHasManyLabelValues {
	a.db = a.db.Session(session)
	return &a
}

func (a metricLabelHasManyLabelValues) Model(m *bizmodel.MetricLabel) *metricLabelHasManyLabelValuesTx {
	return &metricLabelHasManyLabelValuesTx{a.db.Model(m).Association(a.Name())}
}

type metricLabelHasManyLabelValuesTx struct{ tx *gorm.Association }

func (a metricLabelHasManyLabelValuesTx) Find() (result []*bizmodel.MetricLabelValue, err error) {
	return result, a.tx.Find(&result)
}

func (a metricLabelHasManyLabelValuesTx) Append(values ...*bizmodel.MetricLabelValue) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a metricLabelHasManyLabelValuesTx) Replace(values ...*bizmodel.MetricLabelValue) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a metricLabelHasManyLabelValuesTx) Delete(values ...*bizmodel.MetricLabelValue) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a metricLabelHasManyLabelValuesTx) Clear() error {
	return a.tx.Clear()
}

func (a metricLabelHasManyLabelValuesTx) Count() int64 {
	return a.tx.Count()
}

type metricLabelDo struct{ gen.DO }

type IMetricLabelDo interface {
	gen.SubQuery
	Debug() IMetricLabelDo
	WithContext(ctx context.Context) IMetricLabelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMetricLabelDo
	WriteDB() IMetricLabelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMetricLabelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMetricLabelDo
	Not(conds ...gen.Condition) IMetricLabelDo
	Or(conds ...gen.Condition) IMetricLabelDo
	Select(conds ...field.Expr) IMetricLabelDo
	Where(conds ...gen.Condition) IMetricLabelDo
	Order(conds ...field.Expr) IMetricLabelDo
	Distinct(cols ...field.Expr) IMetricLabelDo
	Omit(cols ...field.Expr) IMetricLabelDo
	Join(table schema.Tabler, on ...field.Expr) IMetricLabelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMetricLabelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMetricLabelDo
	Group(cols ...field.Expr) IMetricLabelDo
	Having(conds ...gen.Condition) IMetricLabelDo
	Limit(limit int) IMetricLabelDo
	Offset(offset int) IMetricLabelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMetricLabelDo
	Unscoped() IMetricLabelDo
	Create(values ...*bizmodel.MetricLabel) error
	CreateInBatches(values []*bizmodel.MetricLabel, batchSize int) error
	Save(values ...*bizmodel.MetricLabel) error
	First() (*bizmodel.MetricLabel, error)
	Take() (*bizmodel.MetricLabel, error)
	Last() (*bizmodel.MetricLabel, error)
	Find() ([]*bizmodel.MetricLabel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*bizmodel.MetricLabel, err error)
	FindInBatches(result *[]*bizmodel.MetricLabel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*bizmodel.MetricLabel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMetricLabelDo
	Assign(attrs ...field.AssignExpr) IMetricLabelDo
	Joins(fields ...field.RelationField) IMetricLabelDo
	Preload(fields ...field.RelationField) IMetricLabelDo
	FirstOrInit() (*bizmodel.MetricLabel, error)
	FirstOrCreate() (*bizmodel.MetricLabel, error)
	FindByPage(offset int, limit int) (result []*bizmodel.MetricLabel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMetricLabelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m metricLabelDo) Debug() IMetricLabelDo {
	return m.withDO(m.DO.Debug())
}

func (m metricLabelDo) WithContext(ctx context.Context) IMetricLabelDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m metricLabelDo) ReadDB() IMetricLabelDo {
	return m.Clauses(dbresolver.Read)
}

func (m metricLabelDo) WriteDB() IMetricLabelDo {
	return m.Clauses(dbresolver.Write)
}

func (m metricLabelDo) Session(config *gorm.Session) IMetricLabelDo {
	return m.withDO(m.DO.Session(config))
}

func (m metricLabelDo) Clauses(conds ...clause.Expression) IMetricLabelDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m metricLabelDo) Returning(value interface{}, columns ...string) IMetricLabelDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m metricLabelDo) Not(conds ...gen.Condition) IMetricLabelDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m metricLabelDo) Or(conds ...gen.Condition) IMetricLabelDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m metricLabelDo) Select(conds ...field.Expr) IMetricLabelDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m metricLabelDo) Where(conds ...gen.Condition) IMetricLabelDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m metricLabelDo) Order(conds ...field.Expr) IMetricLabelDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m metricLabelDo) Distinct(cols ...field.Expr) IMetricLabelDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m metricLabelDo) Omit(cols ...field.Expr) IMetricLabelDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m metricLabelDo) Join(table schema.Tabler, on ...field.Expr) IMetricLabelDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m metricLabelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMetricLabelDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m metricLabelDo) RightJoin(table schema.Tabler, on ...field.Expr) IMetricLabelDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m metricLabelDo) Group(cols ...field.Expr) IMetricLabelDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m metricLabelDo) Having(conds ...gen.Condition) IMetricLabelDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m metricLabelDo) Limit(limit int) IMetricLabelDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m metricLabelDo) Offset(offset int) IMetricLabelDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m metricLabelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMetricLabelDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m metricLabelDo) Unscoped() IMetricLabelDo {
	return m.withDO(m.DO.Unscoped())
}

func (m metricLabelDo) Create(values ...*bizmodel.MetricLabel) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m metricLabelDo) CreateInBatches(values []*bizmodel.MetricLabel, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m metricLabelDo) Save(values ...*bizmodel.MetricLabel) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m metricLabelDo) First() (*bizmodel.MetricLabel, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*bizmodel.MetricLabel), nil
	}
}

func (m metricLabelDo) Take() (*bizmodel.MetricLabel, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*bizmodel.MetricLabel), nil
	}
}

func (m metricLabelDo) Last() (*bizmodel.MetricLabel, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*bizmodel.MetricLabel), nil
	}
}

func (m metricLabelDo) Find() ([]*bizmodel.MetricLabel, error) {
	result, err := m.DO.Find()
	return result.([]*bizmodel.MetricLabel), err
}

func (m metricLabelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*bizmodel.MetricLabel, err error) {
	buf := make([]*bizmodel.MetricLabel, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m metricLabelDo) FindInBatches(result *[]*bizmodel.MetricLabel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m metricLabelDo) Attrs(attrs ...field.AssignExpr) IMetricLabelDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m metricLabelDo) Assign(attrs ...field.AssignExpr) IMetricLabelDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m metricLabelDo) Joins(fields ...field.RelationField) IMetricLabelDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m metricLabelDo) Preload(fields ...field.RelationField) IMetricLabelDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m metricLabelDo) FirstOrInit() (*bizmodel.MetricLabel, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*bizmodel.MetricLabel), nil
	}
}

func (m metricLabelDo) FirstOrCreate() (*bizmodel.MetricLabel, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*bizmodel.MetricLabel), nil
	}
}

func (m metricLabelDo) FindByPage(offset int, limit int) (result []*bizmodel.MetricLabel, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m metricLabelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m metricLabelDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m metricLabelDo) Delete(models ...*bizmodel.MetricLabel) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *metricLabelDo) withDO(do gen.Dao) *metricLabelDo {
	m.DO = *do.(*gen.DO)
	return m
}
