syntax = "proto3";

package api.admin.datasource;

import "google/api/annotations.proto";
import "buf/validate/validate.proto";
import "admin/model.proto";
import "enum.proto";
import "global.proto";

option go_package = "github.com/aide-family/moon/api/admin/datasource;datasource";
option java_multiple_files = true;
option java_package = "api.admin.datasource";

// metric数据源数据查询模块
service Metric {
  // 更新元数据
  rpc UpdateMetric (UpdateMetricRequest) returns (UpdateMetricReply) {
    option (google.api.http) = {
      put: "/v1/datasource/metric/{id}"
      body: "*"
    };
  }

  // 获取元数据详情
  rpc GetMetric (GetMetricRequest) returns (GetMetricReply) {
    option (google.api.http) = {
      get: "/v1/datasource/metric/{id}"
    };
  }

  // 获取元数据列表
  rpc ListMetric (ListMetricRequest) returns (ListMetricReply) {
    option (google.api.http) = {
      post: "/v1/datasource/metric/list"
      body: "*"
    };
  }

  // 获取元数据列表（下拉选择接口）
  rpc SelectMetric(SelectMetricRequest) returns (SelectMetricReply) {
    option (google.api.http) = {
      post: "/v1/datasource/metric/select"
      body: "*"
    };
  }

  // 删除指标（用于删除数据源中不再使用的或者错误的指标
  // 因为同步逻辑只会同步最近时间段的指标， 所以删除后需要重新同步）
  // 删除会删除该指标的所有数据， 包括标签， 标签值等
  rpc DeleteMetric(DeleteMetricRequest) returns (DeleteMetricReply) {
    option (google.api.http) = {
      delete: "/v1/datasource/metric/{id}"
    };
  }

  // 推送元数据信息
  rpc SyncMetric(SyncMetricRequest) returns (SyncMetricReply) {
    option (google.api.http) = {
      post: "/v1/datasource/metric/sync"
      body: "*"
    };
  }
}

message UpdateMetricRequest {
  // 指标ID
  uint32 id = 1 [(buf.validate.field).required = true];
  // 指标单位
  string unit = 2;
  // 指标描述
  string remark = 3 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "UpdateMetricRequestRemark",
    message: "指标描述不能为空, 字符数量控制在200以内",
    expression: 'this.size() <= 200 && this.size() > 0'
  }];
}
message UpdateMetricReply {}

message DeleteMetricRequest {
  // 指标ID
  uint32 id = 1 [(buf.validate.field).required = true];
}
message DeleteMetricReply {}

message GetMetricRequest {
  // 指标ID
  uint32 id = 1 [(buf.validate.field).required = true];
  // 是否加载关联数据
  bool withRelation = 2;
}
message GetMetricReply {
  // 详情
  MetricDetail data = 1;
  // label数量
  uint32 labelCount = 2;
}

message ListMetricRequest {
  // 分页参数
  PaginationReq pagination = 1 [(buf.validate.field).required = true];
  // 模糊查询， 不超过20字符搜索
  string keyword = 2 [(buf.validate.field).cel = {
    id: "ListMetricRequestKeyword",
    message: "关键字不能超过200个字符",
    expression: 'this.size() <= 200'
  }];
  // 指标类型
  MetricType metricType = 3 [(buf.validate.field).enum.defined_only = true];
  // 数据源ID
  uint32 datasourceId = 4;
}
message ListMetricReply {
  // 分页参数
  PaginationReply pagination = 1;
  // 数据
  repeated MetricDetail list = 2;
}

message SelectMetricRequest {
  // 模糊查询， 不超过20字符搜索
  string keyword = 1 [(buf.validate.field).cel = {
    id: "SelectMetricRequestKeyword",
    message: "关键字不能超过20个字符",
    expression: 'this.size() <= 20'
  }];
  // 指标类型
  MetricType metricType = 2 [(buf.validate.field).enum.defined_only = true];
  // 数据源ID
  uint32 datasourceId = 3;
  // metric ids (用于包含默认参数的场景， 例如：编辑时候， 映射某个指标)
  repeated uint32 ids = 4;
  // 分页参数
  PaginationReq pagination = 5 [(buf.validate.field).required = true];
}
message SelectMetricReply {
  // 数据
  repeated SelectItem list = 1;
  // 分页参数
  PaginationReply pagination = 2;
}

message SyncMetricRequest {
  // 推送一个指标数据
  MetricDetail metrics = 1 [(buf.validate.field).required = true];
  // 是否推送完毕
  bool done = 2;
  // 数据源ID
  uint32 datasourceId = 3 [(buf.validate.field).cel = {
    id: "SyncMetricRequestDatasourceId",
    message: "数据源ID不能为空",
    expression: 'this > 0'
  }];
  // 团队ID
  uint32 teamId = 4 [(buf.validate.field).cel = {
    id: "SyncMetricRequestTeamId",
    message: "团队ID不能为空",
    expression: 'this > 0'
  }];
}
message SyncMetricReply {}