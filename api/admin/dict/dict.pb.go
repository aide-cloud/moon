// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: admin/dict/dict.proto

package dict

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	api "github.com/aide-family/moon/api"
	admin "github.com/aide-family/moon/api/admin"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatchUpdateDictStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 字典id列表
	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	// 状态
	Status api.Status `protobuf:"varint,2,opt,name=status,proto3,enum=api.Status" json:"status,omitempty"`
}

func (x *BatchUpdateDictStatusRequest) Reset() {
	*x = BatchUpdateDictStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_dict_dict_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateDictStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateDictStatusRequest) ProtoMessage() {}

func (x *BatchUpdateDictStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_dict_dict_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateDictStatusRequest.ProtoReflect.Descriptor instead.
func (*BatchUpdateDictStatusRequest) Descriptor() ([]byte, []int) {
	return file_admin_dict_dict_proto_rawDescGZIP(), []int{0}
}

func (x *BatchUpdateDictStatusRequest) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *BatchUpdateDictStatusRequest) GetStatus() api.Status {
	if x != nil {
		return x.Status
	}
	return api.Status(0)
}

type CreateDictRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 字典名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 字典值
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// 字典类型
	DictType  api.DictType `protobuf:"varint,3,opt,name=dict_type,json=dictType,proto3,enum=api.DictType" json:"dict_type,omitempty"`
	ColorType string       `protobuf:"bytes,4,opt,name=color_type,json=colorType,proto3" json:"color_type,omitempty"`
	CssClass  string       `protobuf:"bytes,5,opt,name=css_class,json=cssClass,proto3" json:"css_class,omitempty"`
	Icon      string       `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	ImageUrl  string       `protobuf:"bytes,7,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	// 状态
	Status       api.Status `protobuf:"varint,8,opt,name=status,proto3,enum=api.Status" json:"status,omitempty"`
	LanguageCode string     `protobuf:"bytes,9,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	Remark       string     `protobuf:"bytes,10,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *CreateDictRequest) Reset() {
	*x = CreateDictRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_dict_dict_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDictRequest) ProtoMessage() {}

func (x *CreateDictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_dict_dict_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDictRequest.ProtoReflect.Descriptor instead.
func (*CreateDictRequest) Descriptor() ([]byte, []int) {
	return file_admin_dict_dict_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDictRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDictRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CreateDictRequest) GetDictType() api.DictType {
	if x != nil {
		return x.DictType
	}
	return api.DictType(0)
}

func (x *CreateDictRequest) GetColorType() string {
	if x != nil {
		return x.ColorType
	}
	return ""
}

func (x *CreateDictRequest) GetCssClass() string {
	if x != nil {
		return x.CssClass
	}
	return ""
}

func (x *CreateDictRequest) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *CreateDictRequest) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *CreateDictRequest) GetStatus() api.Status {
	if x != nil {
		return x.Status
	}
	return api.Status(0)
}

func (x *CreateDictRequest) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *CreateDictRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type GetDictSelectListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页参数
	Pagination *api.PaginationReq `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// 关键字模糊查询
	Keyword string `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	// 状态查询
	Status api.Status `protobuf:"varint,3,opt,name=status,proto3,enum=api.Status" json:"status,omitempty"`
	// 字典类型
	DictType     api.DictType `protobuf:"varint,4,opt,name=dict_type,json=dictType,proto3,enum=api.DictType" json:"dict_type,omitempty"`
	LanguageCode string       `protobuf:"bytes,5,opt,name=language_code,proto3" json:"language_code,omitempty"`
}

func (x *GetDictSelectListRequest) Reset() {
	*x = GetDictSelectListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_dict_dict_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictSelectListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictSelectListRequest) ProtoMessage() {}

func (x *GetDictSelectListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_dict_dict_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictSelectListRequest.ProtoReflect.Descriptor instead.
func (*GetDictSelectListRequest) Descriptor() ([]byte, []int) {
	return file_admin_dict_dict_proto_rawDescGZIP(), []int{2}
}

func (x *GetDictSelectListRequest) GetPagination() *api.PaginationReq {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetDictSelectListRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *GetDictSelectListRequest) GetStatus() api.Status {
	if x != nil {
		return x.Status
	}
	return api.Status(0)
}

func (x *GetDictSelectListRequest) GetDictType() api.DictType {
	if x != nil {
		return x.DictType
	}
	return api.DictType(0)
}

func (x *GetDictSelectListRequest) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

type ListUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户列表
	List []*admin.Dict `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	// 分页信息
	Pagination *api.PaginationReply `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListUserReply) Reset() {
	*x = ListUserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_dict_dict_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserReply) ProtoMessage() {}

func (x *ListUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_dict_dict_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserReply.ProtoReflect.Descriptor instead.
func (*ListUserReply) Descriptor() ([]byte, []int) {
	return file_admin_dict_dict_proto_rawDescGZIP(), []int{3}
}

func (x *ListUserReply) GetList() []*admin.Dict {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListUserReply) GetPagination() *api.PaginationReply {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListDictReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 字典列表
	List []*admin.Dict `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	// 分页信息
	Pagination *api.PaginationReply `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListDictReply) Reset() {
	*x = ListDictReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_dict_dict_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDictReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDictReply) ProtoMessage() {}

func (x *ListDictReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_dict_dict_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDictReply.ProtoReflect.Descriptor instead.
func (*ListDictReply) Descriptor() ([]byte, []int) {
	return file_admin_dict_dict_proto_rawDescGZIP(), []int{4}
}

func (x *ListDictReply) GetList() []*admin.Dict {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListDictReply) GetPagination() *api.PaginationReply {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type UpdateDictRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 字典id
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 更新的数据
	Data *CreateDictRequest `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateDictRequest) Reset() {
	*x = UpdateDictRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_dict_dict_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDictRequest) ProtoMessage() {}

func (x *UpdateDictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_dict_dict_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDictRequest.ProtoReflect.Descriptor instead.
func (*UpdateDictRequest) Descriptor() ([]byte, []int) {
	return file_admin_dict_dict_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateDictRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateDictRequest) GetData() *CreateDictRequest {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteDictRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 字典id
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDictRequest) Reset() {
	*x = DeleteDictRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_dict_dict_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDictRequest) ProtoMessage() {}

func (x *DeleteDictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_dict_dict_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDictRequest.ProtoReflect.Descriptor instead.
func (*DeleteDictRequest) Descriptor() ([]byte, []int) {
	return file_admin_dict_dict_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteDictRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetDictRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 字典id
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDictRequest) Reset() {
	*x = GetDictRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_dict_dict_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictRequest) ProtoMessage() {}

func (x *GetDictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_dict_dict_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictRequest.ProtoReflect.Descriptor instead.
func (*GetDictRequest) Descriptor() ([]byte, []int) {
	return file_admin_dict_dict_proto_rawDescGZIP(), []int{7}
}

func (x *GetDictRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetDictReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dict *admin.Dict `protobuf:"bytes,1,opt,name=dict,proto3" json:"dict,omitempty"`
}

func (x *GetDictReply) Reset() {
	*x = GetDictReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_dict_dict_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictReply) ProtoMessage() {}

func (x *GetDictReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_dict_dict_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictReply.ProtoReflect.Descriptor instead.
func (*GetDictReply) Descriptor() ([]byte, []int) {
	return file_admin_dict_dict_proto_rawDescGZIP(), []int{8}
}

func (x *GetDictReply) GetDict() *admin.Dict {
	if x != nil {
		return x.Dict
	}
	return nil
}

type DeleteDictReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDictReply) Reset() {
	*x = DeleteDictReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_dict_dict_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDictReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDictReply) ProtoMessage() {}

func (x *DeleteDictReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_dict_dict_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDictReply.ProtoReflect.Descriptor instead.
func (*DeleteDictReply) Descriptor() ([]byte, []int) {
	return file_admin_dict_dict_proto_rawDescGZIP(), []int{9}
}

type UpdateDictReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDictReply) Reset() {
	*x = UpdateDictReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_dict_dict_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDictReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDictReply) ProtoMessage() {}

func (x *UpdateDictReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_dict_dict_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDictReply.ProtoReflect.Descriptor instead.
func (*UpdateDictReply) Descriptor() ([]byte, []int) {
	return file_admin_dict_dict_proto_rawDescGZIP(), []int{10}
}

type BatchUpdateDictStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BatchUpdateDictStatusReply) Reset() {
	*x = BatchUpdateDictStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_dict_dict_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateDictStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateDictStatusReply) ProtoMessage() {}

func (x *BatchUpdateDictStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_dict_dict_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateDictStatusReply.ProtoReflect.Descriptor instead.
func (*BatchUpdateDictStatusReply) Descriptor() ([]byte, []int) {
	return file_admin_dict_dict_proto_rawDescGZIP(), []int{11}
}

type CreateDictReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateDictReply) Reset() {
	*x = CreateDictReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_dict_dict_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDictReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDictReply) ProtoMessage() {}

func (x *CreateDictReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_dict_dict_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDictReply.ProtoReflect.Descriptor instead.
func (*CreateDictReply) Descriptor() ([]byte, []int) {
	return file_admin_dict_dict_proto_rawDescGZIP(), []int{12}
}

var File_admin_dict_dict_proto protoreflect.FileDescriptor

var file_admin_dict_dict_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x2f, 0x64, 0x69, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x90, 0x02, 0x0a, 0x1c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x69, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x80, 0x01, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x6e,
	0xba, 0x48, 0x6b, 0xba, 0x01, 0x30, 0x12, 0x1d, 0xe8, 0xaf, 0xb7, 0xe9, 0x80, 0x89, 0xe6, 0x8b,
	0xa9, 0xe8, 0xa6, 0x81, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0x9a, 0x84, 0xe5, 0xad, 0x97,
	0xe5, 0x85, 0xb8, 0x69, 0x64, 0x1a, 0x0f, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65,
	0x28, 0x29, 0x20, 0x3e, 0x20, 0x30, 0xba, 0x01, 0x35, 0x12, 0x24, 0xe5, 0xbf, 0x85, 0xe9, 0xa1,
	0xbb, 0xe4, 0xbf, 0x9d, 0xe8, 0xaf, 0x81, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe5, 0xaf, 0xb9,
	0xe8, 0xb1, 0xa1, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0x1a,
	0x0d, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x28, 0x29, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x12, 0x6d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x48, 0xba, 0x48, 0x45, 0xba, 0x01, 0x42, 0x12, 0x2e, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0xe5, 0x80, 0xbc, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe5, 0x9c, 0xa8, 0x5b, 0xe5, 0x90, 0xaf,
	0xe7, 0x94, 0xa8, 0x28, 0x31, 0x29, 0x2c, 0x20, 0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0x28, 0x30,
	0x29, 0x5d, 0xe4, 0xb9, 0x8b, 0xe9, 0x97, 0xb4, 0x1a, 0x10, 0x28, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x69, 0x6e, 0x20, 0x5b, 0x30, 0x2c, 0x20, 0x31, 0x5d, 0x29, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xd4, 0x08, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xba, 0x48, 0x32, 0xba, 0x01, 0x2f, 0x12, 0x1b,
	0xe5, 0xad, 0x97, 0xe5, 0x85, 0xb8, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe4, 0xb8, 0x8d, 0xe5,
	0x85, 0x81, 0xe8, 0xae, 0xb8, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x1a, 0x10, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x45, 0xba, 0x48, 0x42, 0xba, 0x01, 0x3f, 0x12, 0x29, 0xe5, 0xad, 0x97, 0xe5,
	0x85, 0xb8, 0xe9, 0x94, 0xae, 0xe5, 0x80, 0xbc, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99,
	0x90, 0xe5, 0x88, 0xb6, 0xe5, 0x9c, 0xa8, 0x30, 0x2d, 0x35, 0x30, 0x30, 0xe4, 0xb8, 0xaa, 0xe5,
	0xad, 0x97, 0xe7, 0xac, 0xa6, 0x1a, 0x12, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65,
	0x28, 0x29, 0x20, 0x3c, 0x3d, 0x20, 0x35, 0x30, 0x30, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0xe4, 0x01, 0x0a, 0x09, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x42, 0xb7, 0x01, 0xba, 0x48, 0xb3, 0x01, 0xba, 0x01, 0xaf, 0x01, 0x12, 0x88,
	0x01, 0xe5, 0xad, 0x97, 0xe5, 0x85, 0xb8, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x80, 0xbc,
	0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe5, 0x9c, 0xa8, 0x5b, 0xe6, 0x9c, 0xaa, 0xe7, 0x9f, 0xa5,
	0x28, 0x30, 0x29, 0x2c, 0x20, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x28, 0x31, 0x29, 0x2c, 0x20,
	0xe6, 0xb3, 0xa8, 0xe8, 0xa7, 0xa3, 0x28, 0x32, 0x29, 0x2c, 0x20, 0xe7, 0xad, 0x96, 0xe7, 0x95,
	0xa5, 0x28, 0x33, 0x29, 0x2c, 0x20, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0xe7, 0xbb, 0x84, 0x28,
	0x34, 0x29, 0x2c, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0xab, 0x28,
	0x35, 0x29, 0x2c, 0xe5, 0x91, 0x8a, 0xe8, 0xad, 0xa6, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x28,
	0x36, 0x29, 0x2c, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28,
	0x37, 0x29, 0x5d, 0xe4, 0xb9, 0x8b, 0xe9, 0x97, 0xb4, 0x1a, 0x22, 0x28, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x69, 0x6e, 0x20, 0x5b, 0x30, 0x2c, 0x20, 0x31, 0x2c, 0x20, 0x32, 0x2c, 0x20, 0x33, 0x2c,
	0x20, 0x34, 0x2c, 0x20, 0x35, 0x2c, 0x20, 0x36, 0x2c, 0x20, 0x37, 0x5d, 0x29, 0x52, 0x08, 0x64,
	0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x62, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0xba, 0x48, 0x40,
	0xba, 0x01, 0x3d, 0x12, 0x28, 0xe9, 0xa2, 0x9c, 0xe8, 0x89, 0xb2, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe5, 0x9c, 0xa8,
	0x30, 0x2d, 0x35, 0x30, 0xe4, 0xb8, 0xaa, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x1a, 0x11, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x29, 0x20, 0x3c, 0x3d, 0x20, 0x35, 0x30,
	0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x09, 0x63,
	0x73, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42,
	0xba, 0x48, 0x3f, 0xba, 0x01, 0x3c, 0x12, 0x26, 0x63, 0x73, 0x73, 0xe6, 0xa0, 0xb7, 0xe5, 0xbc,
	0x8f, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe5, 0x9c, 0xa8,
	0x30, 0x2d, 0x31, 0x30, 0x30, 0xe4, 0xb8, 0xaa, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x1a, 0x12,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x29, 0x20, 0x3c, 0x3d, 0x20, 0x31,
	0x30, 0x30, 0x52, 0x08, 0x63, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x51, 0x0a, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0xba, 0x48, 0x3a, 0xba,
	0x01, 0x37, 0x12, 0x21, 0x69, 0x63, 0x6f, 0x6e, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99,
	0x90, 0xe5, 0x88, 0xb6, 0xe5, 0x9c, 0xa8, 0x30, 0x2d, 0x35, 0x30, 0x30, 0xe4, 0xb8, 0xaa, 0xe5,
	0xad, 0x97, 0xe7, 0xac, 0xa6, 0x1a, 0x12, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65,
	0x28, 0x29, 0x20, 0x3c, 0x3d, 0x20, 0x35, 0x30, 0x30, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12,
	0x5f, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x42, 0xba, 0x48, 0x3f, 0xba, 0x01, 0x3c, 0x12, 0x26, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x20, 0x75, 0x72, 0x6c, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88,
	0xb6, 0xe5, 0x9c, 0xa8, 0x30, 0x2d, 0x35, 0x30, 0x30, 0xe4, 0xb8, 0xaa, 0xe5, 0xad, 0x97, 0xe7,
	0xac, 0xa6, 0x1a, 0x12, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x29, 0x20,
	0x3c, 0x3d, 0x20, 0x35, 0x30, 0x30, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x6e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x49, 0xba,
	0x48, 0x46, 0xba, 0x01, 0x43, 0x12, 0x2f, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe5, 0x80, 0xbc,
	0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe5, 0x9c, 0xa8, 0x5b, 0x20, 0xe5, 0x90, 0xaf, 0xe7, 0x94,
	0xa8, 0x28, 0x31, 0x29, 0x2c, 0x20, 0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0x28, 0x30, 0x29, 0x5d,
	0xe4, 0xb9, 0x8b, 0xe9, 0x97, 0xb4, 0x1a, 0x10, 0x28, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x6e,
	0x20, 0x5b, 0x30, 0x2c, 0x20, 0x31, 0x5d, 0x29, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x68, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0xba, 0x48, 0x40, 0xba, 0x01, 0x3d, 0x12,
	0x28, 0xe8, 0xaf, 0xad, 0xe8, 0xa8, 0x80, 0xe7, 0xbc, 0x96, 0xe7, 0xa0, 0x81, 0xe9, 0x95, 0xbf,
	0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe5, 0x9c, 0xa8, 0x30, 0x2d, 0x35, 0x30,
	0xe4, 0xb8, 0xaa, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x1a, 0x11, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x73, 0x69, 0x7a, 0x65, 0x28, 0x29, 0x20, 0x3c, 0x3d, 0x20, 0x35, 0x30, 0x52, 0x0c, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5d, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0xba, 0x48, 0x42, 0xba,
	0x01, 0x3f, 0x12, 0x29, 0xe5, 0xad, 0x97, 0xe5, 0x85, 0xb8, 0xe5, 0xa4, 0x87, 0xe6, 0xb3, 0xa8,
	0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe5, 0x9c, 0xa8, 0x30,
	0x2d, 0x35, 0x30, 0x30, 0xe4, 0xb8, 0xaa, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x1a, 0x12, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x29, 0x20, 0x3c, 0x3d, 0x20, 0x35, 0x30,
	0x30, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x90, 0x05, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0xba, 0x48, 0x49, 0xba, 0x01, 0x46, 0x12, 0x31, 0xe5, 0x85, 0xb3,
	0xe9, 0x94, 0xae, 0xe5, 0xad, 0x97, 0xe6, 0xa8, 0xa1, 0xe7, 0xb3, 0x8a, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe5, 0x9c,
	0xa8, 0x30, 0x2d, 0x32, 0x30, 0xe4, 0xb8, 0xaa, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0x1a, 0x11,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x29, 0x20, 0x3c, 0x3d, 0x20, 0x32,
	0x30, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x6e, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x49, 0xba, 0x48, 0x46, 0xba, 0x01, 0x43, 0x12,
	0x2f, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe5, 0x80, 0xbc, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb,
	0xe5, 0x9c, 0xa8, 0x5b, 0x20, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8, 0x28, 0x31, 0x29, 0x2c, 0x20,
	0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0x28, 0x30, 0x29, 0x5d, 0xe4, 0xb9, 0x8b, 0xe9, 0x97, 0xb4,
	0x1a, 0x10, 0x28, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x30, 0x2c, 0x20, 0x31,
	0x5d, 0x29, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xe4, 0x01, 0x0a, 0x09, 0x64,
	0x69, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0xb7, 0x01,
	0xba, 0x48, 0xb3, 0x01, 0xba, 0x01, 0xaf, 0x01, 0x12, 0x88, 0x01, 0xe5, 0xad, 0x97, 0xe5, 0x85,
	0xb8, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x80, 0xbc, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb,
	0xe5, 0x9c, 0xa8, 0x5b, 0xe6, 0x9c, 0xaa, 0xe7, 0x9f, 0xa5, 0x28, 0x30, 0x29, 0x2c, 0x20, 0xe6,
	0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x28, 0x31, 0x29, 0x2c, 0x20, 0xe6, 0xb3, 0xa8, 0xe8, 0xa7, 0xa3,
	0x28, 0x32, 0x29, 0x2c, 0x20, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0x28, 0x33, 0x29, 0x2c, 0x20,
	0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0xe7, 0xbb, 0x84, 0x28, 0x34, 0x29, 0x2c, 0xe5, 0x91, 0x8a,
	0xe8, 0xad, 0xa6, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0xab, 0x28, 0x35, 0x29, 0x2c, 0xe5, 0x91, 0x8a,
	0xe8, 0xad, 0xa6, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x28, 0x36, 0x29, 0x2c, 0xe9, 0x80, 0x9a,
	0xe7, 0x9f, 0xa5, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x28, 0x37, 0x29, 0x5d, 0xe4, 0xb9, 0x8b,
	0xe9, 0x97, 0xb4, 0x1a, 0x22, 0x28, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x30,
	0x2c, 0x20, 0x31, 0x2c, 0x20, 0x32, 0x2c, 0x20, 0x33, 0x2c, 0x20, 0x34, 0x2c, 0x20, 0x35, 0x2c,
	0x20, 0x36, 0x2c, 0x20, 0x37, 0x5d, 0x29, 0x52, 0x08, 0x64, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x79, 0x0a, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x55, 0xba, 0x48, 0x52, 0xba, 0x01, 0x4f, 0x12,
	0x36, 0xe5, 0xad, 0x97, 0xe5, 0x85, 0xb8, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe5, 0x80, 0xbc,
	0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe5, 0x9c, 0xa8, 0x5b, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87,
	0x28, 0x7a, 0x68, 0x29, 0x2c, 0x20, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0x28, 0x65, 0x6e, 0x29,
	0x5d, 0xe4, 0xb9, 0x8b, 0xe9, 0x97, 0xb4, 0x1a, 0x15, 0x28, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69,
	0x6e, 0x20, 0x5b, 0x27, 0x7a, 0x68, 0x27, 0x2c, 0x27, 0x65, 0x6e, 0x27, 0x5d, 0x29, 0x52, 0x0c,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6a, 0x0a, 0x0d,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6a, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x29, 0xba, 0x48, 0x26, 0xba, 0x01, 0x23, 0x12, 0x17,
	0xe5, 0xad, 0x97, 0xe5, 0x85, 0xb8, 0x69, 0x64, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8,
	0xba, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x81, 0x1a, 0x08, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3e, 0x20,
	0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x64, 0x69, 0x63, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x4e, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x29, 0xba, 0x48, 0x26, 0xba, 0x01, 0x23, 0x12, 0x17, 0xe5,
	0xad, 0x97, 0xe5, 0x85, 0xb8, 0x69, 0x64, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba,
	0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x81, 0x1a, 0x08, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3e, 0x20, 0x30,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x4b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x29, 0xba, 0x48, 0x26, 0xba, 0x01, 0x23, 0x12, 0x17, 0xe5, 0xad, 0x97, 0xe5,
	0x85, 0xb8, 0x69, 0x64, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba,
	0xef, 0xbc, 0x81, 0x1a, 0x08, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x33, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x69, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x69, 0x63, 0x74,
	0x52, 0x04, 0x64, 0x69, 0x63, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x11, 0x0a, 0x0f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1c, 0x0a, 0x1a,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x11, 0x0a, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xba, 0x05,
	0x0a, 0x04, 0x44, 0x69, 0x63, 0x74, 0x12, 0x6c, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x69, 0x63, 0x74, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x64, 0x69, 0x63, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x69, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14,
	0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x71, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69,
	0x63, 0x74, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x64,
	0x69, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01,
	0x2a, 0x1a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6d, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x69, 0x63, 0x74, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x64, 0x69, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x18, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x63,
	0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x8d, 0x01, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x64, 0x69, 0x63,
	0x74, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x3a, 0x01, 0x2a, 0x1a, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x69, 0x63, 0x74, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x64, 0x69, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x69, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x2a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x62, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63,
	0x74, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x64, 0x69,
	0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x64, 0x69,
	0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x63,
	0x74, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0x43, 0x0a, 0x0e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x64, 0x69, 0x63, 0x74, 0x50, 0x01, 0x5a, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x69, 0x64, 0x65, 0x2d,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x2f, 0x6d, 0x6f, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x3b, 0x64, 0x69, 0x63, 0x74, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_admin_dict_dict_proto_rawDescOnce sync.Once
	file_admin_dict_dict_proto_rawDescData = file_admin_dict_dict_proto_rawDesc
)

func file_admin_dict_dict_proto_rawDescGZIP() []byte {
	file_admin_dict_dict_proto_rawDescOnce.Do(func() {
		file_admin_dict_dict_proto_rawDescData = protoimpl.X.CompressGZIP(file_admin_dict_dict_proto_rawDescData)
	})
	return file_admin_dict_dict_proto_rawDescData
}

var file_admin_dict_dict_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_admin_dict_dict_proto_goTypes = []any{
	(*BatchUpdateDictStatusRequest)(nil), // 0: api.admin.dict.BatchUpdateDictStatusRequest
	(*CreateDictRequest)(nil),            // 1: api.admin.dict.CreateDictRequest
	(*GetDictSelectListRequest)(nil),     // 2: api.admin.dict.GetDictSelectListRequest
	(*ListUserReply)(nil),                // 3: api.admin.dict.ListUserReply
	(*ListDictReply)(nil),                // 4: api.admin.dict.ListDictReply
	(*UpdateDictRequest)(nil),            // 5: api.admin.dict.UpdateDictRequest
	(*DeleteDictRequest)(nil),            // 6: api.admin.dict.DeleteDictRequest
	(*GetDictRequest)(nil),               // 7: api.admin.dict.GetDictRequest
	(*GetDictReply)(nil),                 // 8: api.admin.dict.GetDictReply
	(*DeleteDictReply)(nil),              // 9: api.admin.dict.DeleteDictReply
	(*UpdateDictReply)(nil),              // 10: api.admin.dict.UpdateDictReply
	(*BatchUpdateDictStatusReply)(nil),   // 11: api.admin.dict.BatchUpdateDictStatusReply
	(*CreateDictReply)(nil),              // 12: api.admin.dict.CreateDictReply
	(api.Status)(0),                      // 13: api.Status
	(api.DictType)(0),                    // 14: api.DictType
	(*api.PaginationReq)(nil),            // 15: api.PaginationReq
	(*admin.Dict)(nil),                   // 16: api.admin.Dict
	(*api.PaginationReply)(nil),          // 17: api.PaginationReply
}
var file_admin_dict_dict_proto_depIdxs = []int32{
	13, // 0: api.admin.dict.BatchUpdateDictStatusRequest.status:type_name -> api.Status
	14, // 1: api.admin.dict.CreateDictRequest.dict_type:type_name -> api.DictType
	13, // 2: api.admin.dict.CreateDictRequest.status:type_name -> api.Status
	15, // 3: api.admin.dict.GetDictSelectListRequest.pagination:type_name -> api.PaginationReq
	13, // 4: api.admin.dict.GetDictSelectListRequest.status:type_name -> api.Status
	14, // 5: api.admin.dict.GetDictSelectListRequest.dict_type:type_name -> api.DictType
	16, // 6: api.admin.dict.ListUserReply.list:type_name -> api.admin.Dict
	17, // 7: api.admin.dict.ListUserReply.pagination:type_name -> api.PaginationReply
	16, // 8: api.admin.dict.ListDictReply.list:type_name -> api.admin.Dict
	17, // 9: api.admin.dict.ListDictReply.pagination:type_name -> api.PaginationReply
	1,  // 10: api.admin.dict.UpdateDictRequest.data:type_name -> api.admin.dict.CreateDictRequest
	16, // 11: api.admin.dict.GetDictReply.dict:type_name -> api.admin.Dict
	1,  // 12: api.admin.dict.Dict.CreateDict:input_type -> api.admin.dict.CreateDictRequest
	5,  // 13: api.admin.dict.Dict.UpdateDict:input_type -> api.admin.dict.UpdateDictRequest
	2,  // 14: api.admin.dict.Dict.ListDict:input_type -> api.admin.dict.GetDictSelectListRequest
	0,  // 15: api.admin.dict.Dict.BatchUpdateDictStatus:input_type -> api.admin.dict.BatchUpdateDictStatusRequest
	6,  // 16: api.admin.dict.Dict.DeleteDict:input_type -> api.admin.dict.DeleteDictRequest
	7,  // 17: api.admin.dict.Dict.GetDict:input_type -> api.admin.dict.GetDictRequest
	12, // 18: api.admin.dict.Dict.CreateDict:output_type -> api.admin.dict.CreateDictReply
	10, // 19: api.admin.dict.Dict.UpdateDict:output_type -> api.admin.dict.UpdateDictReply
	4,  // 20: api.admin.dict.Dict.ListDict:output_type -> api.admin.dict.ListDictReply
	11, // 21: api.admin.dict.Dict.BatchUpdateDictStatus:output_type -> api.admin.dict.BatchUpdateDictStatusReply
	9,  // 22: api.admin.dict.Dict.DeleteDict:output_type -> api.admin.dict.DeleteDictReply
	8,  // 23: api.admin.dict.Dict.GetDict:output_type -> api.admin.dict.GetDictReply
	18, // [18:24] is the sub-list for method output_type
	12, // [12:18] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_admin_dict_dict_proto_init() }
func file_admin_dict_dict_proto_init() {
	if File_admin_dict_dict_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_admin_dict_dict_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*BatchUpdateDictStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_dict_dict_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreateDictRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_dict_dict_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetDictSelectListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_dict_dict_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ListUserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_dict_dict_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ListDictReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_dict_dict_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDictRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_dict_dict_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteDictRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_dict_dict_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetDictRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_dict_dict_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetDictReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_dict_dict_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteDictReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_dict_dict_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDictReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_dict_dict_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*BatchUpdateDictStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_dict_dict_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CreateDictReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_admin_dict_dict_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_admin_dict_dict_proto_goTypes,
		DependencyIndexes: file_admin_dict_dict_proto_depIdxs,
		MessageInfos:      file_admin_dict_dict_proto_msgTypes,
	}.Build()
	File_admin_dict_dict_proto = out.File
	file_admin_dict_dict_proto_rawDesc = nil
	file_admin_dict_dict_proto_goTypes = nil
	file_admin_dict_dict_proto_depIdxs = nil
}
