// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package merr

import (
	context "context"
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
	i18n "github.com/nicksnyder/go-i18n/v2/i18n"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

type localizeKey struct{}

func FromContext(ctx context.Context) (*i18n.Localizer, bool) {
	local, ok := ctx.Value(localizeKey{}).(*i18n.Localizer)
	return local, ok
}

func WithLocalize(ctx context.Context, localize *i18n.Localizer) context.Context {
	return context.WithValue(ctx, localizeKey{}, localize)
}

// GetI18nMessage 获取错误信息
func GetI18nMessage(ctx context.Context, id string, args ...interface{}) string {
	if id == "" {
		return ""
	}
	config := &i18n.LocalizeConfig{
		MessageID: id,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	local, ok := FromContext(ctx)
	if !ok {
		return ""
	}
	localize, err := local.Localize(config)
	if err != nil {
		return ""
	}
	return localize
}

// IsAlert 用于表单验证错误
func IsAlert(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ALERT.String() && e.Code == 405
}

// ErrorAlert 用于表单验证错误
func ErrorAlert(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_ALERT.String(), fmt.Sprintf(format, args...))
}

// ErrorAlertWithContext 用于表单验证错误
//
//	带上下文，支持国际化输出元数据
func ErrorAlertWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_ALERT.String(), fmt.Sprintf(format, args...))
}

// IsModal 用于弹窗验证错误
func IsModal(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MODAL.String() && e.Code == 405
}

// ErrorModal 用于弹窗验证错误
func ErrorModal(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_MODAL.String(), fmt.Sprintf(format, args...))
}

// ErrorModalWithContext 用于弹窗验证错误
//
//	带上下文，支持国际化输出元数据
func ErrorModalWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_MODAL.String(), fmt.Sprintf(format, args...))
}

// IsToast 用于toast验证错误
func IsToast(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TOAST.String() && e.Code == 405
}

// ErrorToast 用于toast验证错误
func ErrorToast(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_TOAST.String(), fmt.Sprintf(format, args...))
}

// ErrorToastWithContext 用于toast验证错误
//
//	带上下文，支持国际化输出元数据
func ErrorToastWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_TOAST.String(), fmt.Sprintf(format, args...))
}

// IsNotification 用于通知验证错误
func IsNotification(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NOTIFICATION.String() && e.Code == 405
}

// ErrorNotification 用于通知验证错误
func ErrorNotification(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_NOTIFICATION.String(), fmt.Sprintf(format, args...))
}

// ErrorNotificationWithContext 用于通知验证错误
//
//	带上下文，支持国际化输出元数据
func ErrorNotificationWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_NOTIFICATION.String(), fmt.Sprintf(format, args...))
}

// IsRedirect 用于重定向验证错误, 跳转到指定页面
func IsRedirect(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REDIRECT.String() && e.Code == 405
}

// ErrorRedirect 用于重定向验证错误, 跳转到指定页面
func ErrorRedirect(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_REDIRECT.String(), fmt.Sprintf(format, args...))
}

// ErrorRedirectWithContext 用于重定向验证错误, 跳转到指定页面
//
//	带上下文，支持国际化输出元数据
func ErrorRedirectWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_REDIRECT.String(), fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"redirect": func(ctx context.Context, id string) string {
			msg := GetI18nMessage(ctx, id)
			if msg != "" {
				return msg
			}
			return id
		}(ctx, "/login"),
	})
}

const ErrorI18nRedirectID = "REDIRECT"

// ErrorI18nRedirect 用于重定向验证错误, 跳转到指定页面
//
//	支持国际化输出
func ErrorI18nRedirect(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nRedirectID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_REDIRECT.String(), fmt.Sprintf("请登录", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_REDIRECT.String(), fmt.Sprintf("请登录", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_REDIRECT.String(), localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"redirect": func(ctx context.Context, id string) string {
			msg := GetI18nMessage(ctx, id)
			if msg != "" {
				return msg
			}
			return id
		}(ctx, "/login"),
	})
}

// IsAdminUserDeleteErr 管理员不能删除
func IsAdminUserDeleteErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADMIN_USER_DELETE_ERR.String() && e.Code == 405
}

// ErrorAdminUserDeleteErr 管理员不能删除
func ErrorAdminUserDeleteErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_ADMIN_USER_DELETE_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorAdminUserDeleteErrWithContext 管理员不能删除
//
//	带上下文，支持国际化输出元数据
func ErrorAdminUserDeleteErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_ADMIN_USER_DELETE_ERR.String(), fmt.Sprintf(format, args...))
}

const ErrorI18nAdminUserDeleteErrID = "ADMIN_USER_DELETE_ERR"

// ErrorI18nAdminUserDeleteErr 管理员不能删除
//
//	支持国际化输出
func ErrorI18nAdminUserDeleteErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nAdminUserDeleteErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_ADMIN_USER_DELETE_ERR.String(), fmt.Sprintf("管理员不能删除", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_ADMIN_USER_DELETE_ERR.String(), fmt.Sprintf("管理员不能删除", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_ADMIN_USER_DELETE_ERR.String(), localize)
		}
	}

	return err
}

// IsDatasourceNotFoundErr 数据源不存在
func IsDatasourceNotFoundErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DATASOURCE_NOT_FOUND_ERR.String() && e.Code == 405
}

// ErrorDatasourceNotFoundErr 数据源不存在
func ErrorDatasourceNotFoundErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_DATASOURCE_NOT_FOUND_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorDatasourceNotFoundErrWithContext 数据源不存在
//
//	带上下文，支持国际化输出元数据
func ErrorDatasourceNotFoundErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_DATASOURCE_NOT_FOUND_ERR.String(), fmt.Sprintf(format, args...))
}

const ErrorI18nDatasourceNotFoundErrID = "DATASOURCE_NOT_FOUND_ERR"

// ErrorI18nDatasourceNotFoundErr 数据源不存在
//
//	支持国际化输出
func ErrorI18nDatasourceNotFoundErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nDatasourceNotFoundErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_DATASOURCE_NOT_FOUND_ERR.String(), fmt.Sprintf("数据源不存在", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_DATASOURCE_NOT_FOUND_ERR.String(), fmt.Sprintf("数据源不存在", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_DATASOURCE_NOT_FOUND_ERR.String(), localize)
		}
	}

	return err
}

// IsDeleteSelfErr 不能删除自己
func IsDeleteSelfErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DELETE_SELF_ERR.String() && e.Code == 405
}

// ErrorDeleteSelfErr 不能删除自己
func ErrorDeleteSelfErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_DELETE_SELF_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorDeleteSelfErrWithContext 不能删除自己
//
//	带上下文，支持国际化输出元数据
func ErrorDeleteSelfErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_DELETE_SELF_ERR.String(), fmt.Sprintf(format, args...))
}

const ErrorI18nDeleteSelfErrID = "DELETE_SELF_ERR"

// ErrorI18nDeleteSelfErr 不能删除自己
//
//	支持国际化输出
func ErrorI18nDeleteSelfErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nDeleteSelfErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_DELETE_SELF_ERR.String(), fmt.Sprintf("不能删除自己", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_DELETE_SELF_ERR.String(), fmt.Sprintf("不能删除自己", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_DELETE_SELF_ERR.String(), localize)
		}
	}

	return err
}

// IsLockFailedErr 获取锁失败
func IsLockFailedErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LOCK_FAILED_ERR.String() && e.Code == 405
}

// ErrorLockFailedErr 获取锁失败
func ErrorLockFailedErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_LOCK_FAILED_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorLockFailedErrWithContext 获取锁失败
//
//	带上下文，支持国际化输出元数据
func ErrorLockFailedErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_LOCK_FAILED_ERR.String(), fmt.Sprintf(format, args...))
}

const ErrorI18nLockFailedErrID = "LOCK_FAILED_ERR"

// ErrorI18nLockFailedErr 获取锁失败
//
//	支持国际化输出
func ErrorI18nLockFailedErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nLockFailedErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_LOCK_FAILED_ERR.String(), fmt.Sprintf("获取锁失败", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_LOCK_FAILED_ERR.String(), fmt.Sprintf("获取锁失败", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_LOCK_FAILED_ERR.String(), localize)
		}
	}

	return err
}

// IsNoPermissionErr NoPermissionErr 您没有权限操作
func IsNoPermissionErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NO_PERMISSION_ERR.String() && e.Code == 405
}

// ErrorNoPermissionErr NoPermissionErr 您没有权限操作
func ErrorNoPermissionErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_NO_PERMISSION_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorNoPermissionErrWithContext NoPermissionErr 您没有权限操作
//
//	带上下文，支持国际化输出元数据
func ErrorNoPermissionErrWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_NO_PERMISSION_ERR.String(), fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"rbac": func(ctx context.Context, id string) string {
			msg := GetI18nMessage(ctx, id)
			if msg != "" {
				return msg
			}
			return id
		}(ctx, "false"),
	})
}

const ErrorI18nNoPermissionErrID = "NO_PERMISSION_ERR"

// ErrorI18nNoPermissionErr NoPermissionErr 您没有权限操作
//
//	支持国际化输出
func ErrorI18nNoPermissionErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nNoPermissionErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_NO_PERMISSION_ERR.String(), fmt.Sprintf("您没有权限操作", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_NO_PERMISSION_ERR.String(), fmt.Sprintf("您没有权限操作", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_NO_PERMISSION_ERR.String(), localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"rbac": func(ctx context.Context, id string) string {
			msg := GetI18nMessage(ctx, id)
			if msg != "" {
				return msg
			}
			return id
		}(ctx, "false"),
	})
}

// IsParamsErr 参数错误
func IsParamsErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PARAMS_ERR.String() && e.Code == 405
}

// ErrorParamsErr 参数错误
func ErrorParamsErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_PARAMS_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorParamsErrWithContext 参数错误
//
//	带上下文，支持国际化输出元数据
func ErrorParamsErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_PARAMS_ERR.String(), fmt.Sprintf(format, args...))
}

const ErrorI18nParamsErrID = "PARAMS_ERR"

// ErrorI18nParamsErr 参数错误
//
//	支持国际化输出
func ErrorI18nParamsErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nParamsErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_PARAMS_ERR.String(), fmt.Sprintf("参数错误", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_PARAMS_ERR.String(), fmt.Sprintf("参数错误", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_PARAMS_ERR.String(), localize)
		}
	}

	return err
}

// IsPasswordErr 密码错误
func IsPasswordErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PASSWORD_ERR.String() && e.Code == 405
}

// ErrorPasswordErr 密码错误
func ErrorPasswordErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_PASSWORD_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorPasswordErrWithContext 密码错误
//
//	带上下文，支持国际化输出元数据
func ErrorPasswordErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_PASSWORD_ERR.String(), fmt.Sprintf(format, args...))
}

const ErrorI18nPasswordErrID = "PASSWORD_ERR"

// ErrorI18nPasswordErr 密码错误
//
//	支持国际化输出
func ErrorI18nPasswordErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nPasswordErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_PASSWORD_ERR.String(), fmt.Sprintf("密码错误", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_PASSWORD_ERR.String(), fmt.Sprintf("密码错误", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_PASSWORD_ERR.String(), localize)
		}
	}

	return err
}

// IsPasswordSameErr 新旧密码不能相同
func IsPasswordSameErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PASSWORD_SAME_ERR.String() && e.Code == 405
}

// ErrorPasswordSameErr 新旧密码不能相同
func ErrorPasswordSameErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_PASSWORD_SAME_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorPasswordSameErrWithContext 新旧密码不能相同
//
//	带上下文，支持国际化输出元数据
func ErrorPasswordSameErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_PASSWORD_SAME_ERR.String(), fmt.Sprintf(format, args...))
}

const ErrorI18nPasswordSameErrID = "PASSWORD_SAME_ERR"

// ErrorI18nPasswordSameErr 新旧密码不能相同
//
//	支持国际化输出
func ErrorI18nPasswordSameErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nPasswordSameErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_PASSWORD_SAME_ERR.String(), fmt.Sprintf("新旧密码不能相同", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_PASSWORD_SAME_ERR.String(), fmt.Sprintf("新旧密码不能相同", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_PASSWORD_SAME_ERR.String(), localize)
		}
	}

	return err
}

// IsResourceNotFoundErr 资源不存在
func IsResourceNotFoundErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RESOURCE_NOT_FOUND_ERR.String() && e.Code == 405
}

// ErrorResourceNotFoundErr 资源不存在
func ErrorResourceNotFoundErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_RESOURCE_NOT_FOUND_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorResourceNotFoundErrWithContext 资源不存在
//
//	带上下文，支持国际化输出元数据
func ErrorResourceNotFoundErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_RESOURCE_NOT_FOUND_ERR.String(), fmt.Sprintf(format, args...))
}

const ErrorI18nResourceNotFoundErrID = "RESOURCE_NOT_FOUND_ERR"

// ErrorI18nResourceNotFoundErr 资源不存在
//
//	支持国际化输出
func ErrorI18nResourceNotFoundErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nResourceNotFoundErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_RESOURCE_NOT_FOUND_ERR.String(), fmt.Sprintf("资源不存在", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_RESOURCE_NOT_FOUND_ERR.String(), fmt.Sprintf("资源不存在", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_RESOURCE_NOT_FOUND_ERR.String(), localize)
		}
	}

	return err
}

// IsRetryLaterErr 请稍后重试
func IsRetryLaterErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RETRY_LATER_ERR.String() && e.Code == 405
}

// ErrorRetryLaterErr 请稍后重试
func ErrorRetryLaterErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_RETRY_LATER_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorRetryLaterErrWithContext 请稍后重试
//
//	带上下文，支持国际化输出元数据
func ErrorRetryLaterErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_RETRY_LATER_ERR.String(), fmt.Sprintf(format, args...))
}

const ErrorI18nRetryLaterErrID = "RETRY_LATER_ERR"

// ErrorI18nRetryLaterErr 请稍后重试
//
//	支持国际化输出
func ErrorI18nRetryLaterErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nRetryLaterErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_RETRY_LATER_ERR.String(), fmt.Sprintf("请稍后重试", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_RETRY_LATER_ERR.String(), fmt.Sprintf("请稍后重试", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_RETRY_LATER_ERR.String(), localize)
		}
	}

	return err
}

// IsSystemErr 系统错误
func IsSystemErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SYSTEM_ERR.String() && e.Code == 500
}

// ErrorSystemErr 系统错误
func ErrorSystemErr(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_SYSTEM_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorSystemErrWithContext 系统错误
//
//	带上下文，支持国际化输出元数据
func ErrorSystemErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_SYSTEM_ERR.String(), fmt.Sprintf(format, args...))
}

const ErrorI18nSystemErrID = "SYSTEM_ERR"

// ErrorI18nSystemErr 系统错误
//
//	支持国际化输出
func ErrorI18nSystemErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nSystemErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(500, ErrorReason_SYSTEM_ERR.String(), fmt.Sprintf("系统错误", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(500, ErrorReason_SYSTEM_ERR.String(), fmt.Sprintf("系统错误", args...)).WithCause(err1)
		} else {
			err = errors.New(500, ErrorReason_SYSTEM_ERR.String(), localize)
		}
	}

	return err
}

// IsTeamLeaderErr 团队负责人不能删除
func IsTeamLeaderErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TEAM_LEADER_ERR.String() && e.Code == 405
}

// ErrorTeamLeaderErr 团队负责人不能删除
func ErrorTeamLeaderErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_TEAM_LEADER_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorTeamLeaderErrWithContext 团队负责人不能删除
//
//	带上下文，支持国际化输出元数据
func ErrorTeamLeaderErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_TEAM_LEADER_ERR.String(), fmt.Sprintf(format, args...))
}

const ErrorI18nTeamLeaderErrID = "TEAM_LEADER_ERR"

// ErrorI18nTeamLeaderErr 团队负责人不能删除
//
//	支持国际化输出
func ErrorI18nTeamLeaderErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nTeamLeaderErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_TEAM_LEADER_ERR.String(), fmt.Sprintf("团队负责人不能删除", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_TEAM_LEADER_ERR.String(), fmt.Sprintf("团队负责人不能删除", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_TEAM_LEADER_ERR.String(), localize)
		}
	}

	return err
}

// IsTeamLeaderRepeatErr 你已经是团队负责人了
func IsTeamLeaderRepeatErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TEAM_LEADER_REPEAT_ERR.String() && e.Code == 405
}

// ErrorTeamLeaderRepeatErr 你已经是团队负责人了
func ErrorTeamLeaderRepeatErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_TEAM_LEADER_REPEAT_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorTeamLeaderRepeatErrWithContext 你已经是团队负责人了
//
//	带上下文，支持国际化输出元数据
func ErrorTeamLeaderRepeatErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_TEAM_LEADER_REPEAT_ERR.String(), fmt.Sprintf(format, args...))
}

const ErrorI18nTeamLeaderRepeatErrID = "TEAM_LEADER_REPEAT_ERR"

// ErrorI18nTeamLeaderRepeatErr 你已经是团队负责人了
//
//	支持国际化输出
func ErrorI18nTeamLeaderRepeatErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nTeamLeaderRepeatErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_TEAM_LEADER_REPEAT_ERR.String(), fmt.Sprintf("你已经是团队负责人了", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_TEAM_LEADER_REPEAT_ERR.String(), fmt.Sprintf("你已经是团队负责人了", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_TEAM_LEADER_REPEAT_ERR.String(), localize)
		}
	}

	return err
}

// IsTeamNameExistErr 团队名称已存在
func IsTeamNameExistErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TEAM_NAME_EXIST_ERR.String() && e.Code == 405
}

// ErrorTeamNameExistErr 团队名称已存在
func ErrorTeamNameExistErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_TEAM_NAME_EXIST_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorTeamNameExistErrWithContext 团队名称已存在
//
//	带上下文，支持国际化输出元数据
func ErrorTeamNameExistErrWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_TEAM_NAME_EXIST_ERR.String(), fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"name": func(ctx context.Context, id string) string {
			msg := GetI18nMessage(ctx, id)
			if msg != "" {
				return msg
			}
			return id
		}(ctx, "TEAM_NAME_EXIST_ERR"),
	})
}

const ErrorI18nTeamNameExistErrID = "TEAM_NAME_EXIST_ERR"

// ErrorI18nTeamNameExistErr 团队名称已存在
//
//	支持国际化输出
func ErrorI18nTeamNameExistErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nTeamNameExistErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_TEAM_NAME_EXIST_ERR.String(), fmt.Sprintf("团队名称已存在", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_TEAM_NAME_EXIST_ERR.String(), fmt.Sprintf("团队名称已存在", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_TEAM_NAME_EXIST_ERR.String(), localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"name": func(ctx context.Context, id string) string {
			msg := GetI18nMessage(ctx, id)
			if msg != "" {
				return msg
			}
			return id
		}(ctx, "TEAM_NAME_EXIST_ERR"),
	})
}

// IsTeamNotFoundErr 团队不存在
func IsTeamNotFoundErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TEAM_NOT_FOUND_ERR.String() && e.Code == 405
}

// ErrorTeamNotFoundErr 团队不存在
func ErrorTeamNotFoundErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_TEAM_NOT_FOUND_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorTeamNotFoundErrWithContext 团队不存在
//
//	带上下文，支持国际化输出元数据
func ErrorTeamNotFoundErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_TEAM_NOT_FOUND_ERR.String(), fmt.Sprintf(format, args...))
}

const ErrorI18nTeamNotFoundErrID = "TEAM_NOT_FOUND_ERR"

// ErrorI18nTeamNotFoundErr 团队不存在
//
//	支持国际化输出
func ErrorI18nTeamNotFoundErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nTeamNotFoundErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_TEAM_NOT_FOUND_ERR.String(), fmt.Sprintf("团队不存在", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_TEAM_NOT_FOUND_ERR.String(), fmt.Sprintf("团队不存在", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_TEAM_NOT_FOUND_ERR.String(), localize)
		}
	}

	return err
}

// IsTeamRoleNotFoundErr 团队角色不存在
func IsTeamRoleNotFoundErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TEAM_ROLE_NOT_FOUND_ERR.String() && e.Code == 405
}

// ErrorTeamRoleNotFoundErr 团队角色不存在
func ErrorTeamRoleNotFoundErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_TEAM_ROLE_NOT_FOUND_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorTeamRoleNotFoundErrWithContext 团队角色不存在
//
//	带上下文，支持国际化输出元数据
func ErrorTeamRoleNotFoundErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_TEAM_ROLE_NOT_FOUND_ERR.String(), fmt.Sprintf(format, args...))
}

const ErrorI18nTeamRoleNotFoundErrID = "TEAM_ROLE_NOT_FOUND_ERR"

// ErrorI18nTeamRoleNotFoundErr 团队角色不存在
//
//	支持国际化输出
func ErrorI18nTeamRoleNotFoundErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nTeamRoleNotFoundErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_TEAM_ROLE_NOT_FOUND_ERR.String(), fmt.Sprintf("团队角色不存在", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_TEAM_ROLE_NOT_FOUND_ERR.String(), fmt.Sprintf("团队角色不存在", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_TEAM_ROLE_NOT_FOUND_ERR.String(), localize)
		}
	}

	return err
}

// IsUnLoginErr 未登录
func IsUnLoginErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UN_LOGIN_ERR.String() && e.Code == 405
}

// ErrorUnLoginErr 未登录
func ErrorUnLoginErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_UN_LOGIN_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorUnLoginErrWithContext 未登录
//
//	带上下文，支持国际化输出元数据
func ErrorUnLoginErrWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_UN_LOGIN_ERR.String(), fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"redirect": func(ctx context.Context, id string) string {
			msg := GetI18nMessage(ctx, id)
			if msg != "" {
				return msg
			}
			return id
		}(ctx, "/login"),
	})
}

const ErrorI18nUnLoginErrID = "UN_LOGIN_ERR"

// ErrorI18nUnLoginErr 未登录
//
//	支持国际化输出
func ErrorI18nUnLoginErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nUnLoginErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_UN_LOGIN_ERR.String(), fmt.Sprintf("未登录", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_UN_LOGIN_ERR.String(), fmt.Sprintf("未登录", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_UN_LOGIN_ERR.String(), localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"redirect": func(ctx context.Context, id string) string {
			msg := GetI18nMessage(ctx, id)
			if msg != "" {
				return msg
			}
			return id
		}(ctx, "/login"),
	})
}

// IsUserNotFoundErr 用户不存在
func IsUserNotFoundErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND_ERR.String() && e.Code == 405
}

// ErrorUserNotFoundErr 用户不存在
func ErrorUserNotFoundErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_USER_NOT_FOUND_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorUserNotFoundErrWithContext 用户不存在
//
//	带上下文，支持国际化输出元数据
func ErrorUserNotFoundErrWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_USER_NOT_FOUND_ERR.String(), fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"redirect": func(ctx context.Context, id string) string {
			msg := GetI18nMessage(ctx, id)
			if msg != "" {
				return msg
			}
			return id
		}(ctx, "/login"),
	})
}

const ErrorI18nUserNotFoundErrID = "USER_NOT_FOUND_ERR"

// ErrorI18nUserNotFoundErr 用户不存在
//
//	支持国际化输出
func ErrorI18nUserNotFoundErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nUserNotFoundErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_USER_NOT_FOUND_ERR.String(), fmt.Sprintf("用户不存在", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_USER_NOT_FOUND_ERR.String(), fmt.Sprintf("用户不存在", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_USER_NOT_FOUND_ERR.String(), localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"redirect": func(ctx context.Context, id string) string {
			msg := GetI18nMessage(ctx, id)
			if msg != "" {
				return msg
			}
			return id
		}(ctx, "/login"),
	})
}

// IsUserLimitErr 你已经被限制使用此平台
func IsUserLimitErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_LIMIT_ERR.String() && e.Code == 405
}

// ErrorUserLimitErr 你已经被限制使用此平台
func ErrorUserLimitErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_USER_LIMIT_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorUserLimitErrWithContext 你已经被限制使用此平台
//
//	带上下文，支持国际化输出元数据
func ErrorUserLimitErrWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_USER_LIMIT_ERR.String(), fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"redirect": func(ctx context.Context, id string) string {
			msg := GetI18nMessage(ctx, id)
			if msg != "" {
				return msg
			}
			return id
		}(ctx, "/login"),
	})
}

const ErrorI18nUserLimitErrID = "USER_LIMIT_ERR"

// ErrorI18nUserLimitErr 你已经被限制使用此平台
//
//	支持国际化输出
func ErrorI18nUserLimitErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nUserLimitErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_USER_LIMIT_ERR.String(), fmt.Sprintf("你已经被限制使用此平台", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_USER_LIMIT_ERR.String(), fmt.Sprintf("你已经被限制使用此平台", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_USER_LIMIT_ERR.String(), localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"redirect": func(ctx context.Context, id string) string {
			msg := GetI18nMessage(ctx, id)
			if msg != "" {
				return msg
			}
			return id
		}(ctx, "/login"),
	})
}

// IsUserNotInTeamErr 你已经不在该团队中
func IsUserNotInTeamErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_IN_TEAM_ERR.String() && e.Code == 405
}

// ErrorUserNotInTeamErr 你已经不在该团队中
func ErrorUserNotInTeamErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_USER_NOT_IN_TEAM_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorUserNotInTeamErrWithContext 你已经不在该团队中
//
//	带上下文，支持国际化输出元数据
func ErrorUserNotInTeamErrWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_USER_NOT_IN_TEAM_ERR.String(), fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"redirect": func(ctx context.Context, id string) string {
			msg := GetI18nMessage(ctx, id)
			if msg != "" {
				return msg
			}
			return id
		}(ctx, "/login"),
	})
}

const ErrorI18nUserNotInTeamErrID = "USER_NOT_IN_TEAM_ERR"

// ErrorI18nUserNotInTeamErr 你已经不在该团队中
//
//	支持国际化输出
func ErrorI18nUserNotInTeamErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nUserNotInTeamErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_USER_NOT_IN_TEAM_ERR.String(), fmt.Sprintf("你已经不在该团队中", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_USER_NOT_IN_TEAM_ERR.String(), fmt.Sprintf("你已经不在该团队中", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_USER_NOT_IN_TEAM_ERR.String(), localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"redirect": func(ctx context.Context, id string) string {
			msg := GetI18nMessage(ctx, id)
			if msg != "" {
				return msg
			}
			return id
		}(ctx, "/login"),
	})
}

// IsUserTeamDisabledErr 你已经被该团队禁用
func IsUserTeamDisabledErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_TEAM_DISABLED_ERR.String() && e.Code == 405
}

// ErrorUserTeamDisabledErr 你已经被该团队禁用
func ErrorUserTeamDisabledErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_USER_TEAM_DISABLED_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorUserTeamDisabledErrWithContext 你已经被该团队禁用
//
//	带上下文，支持国际化输出元数据
func ErrorUserTeamDisabledErrWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_USER_TEAM_DISABLED_ERR.String(), fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"redirect": func(ctx context.Context, id string) string {
			msg := GetI18nMessage(ctx, id)
			if msg != "" {
				return msg
			}
			return id
		}(ctx, "/login"),
	})
}

const ErrorI18nUserTeamDisabledErrID = "USER_TEAM_DISABLED_ERR"

// ErrorI18nUserTeamDisabledErr 你已经被该团队禁用
//
//	支持国际化输出
func ErrorI18nUserTeamDisabledErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nUserTeamDisabledErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_USER_TEAM_DISABLED_ERR.String(), fmt.Sprintf("你已经被该团队禁用", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_USER_TEAM_DISABLED_ERR.String(), fmt.Sprintf("你已经被该团队禁用", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_USER_TEAM_DISABLED_ERR.String(), localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"redirect": func(ctx context.Context, id string) string {
			msg := GetI18nMessage(ctx, id)
			if msg != "" {
				return msg
			}
			return id
		}(ctx, "/login"),
	})
}

// IsGetCaptchaErr 获取验证码失败
func IsGetCaptchaErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_CAPTCHA_ERR.String() && e.Code == 405
}

// ErrorGetCaptchaErr 获取验证码失败
func ErrorGetCaptchaErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_GET_CAPTCHA_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorGetCaptchaErrWithContext 获取验证码失败
//
//	带上下文，支持国际化输出元数据
func ErrorGetCaptchaErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_GET_CAPTCHA_ERR.String(), fmt.Sprintf(format, args...))
}

const ErrorI18nGetCaptchaErrID = "GET_CAPTCHA_ERR"

// ErrorI18nGetCaptchaErr 获取验证码失败
//
//	支持国际化输出
func ErrorI18nGetCaptchaErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nGetCaptchaErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_GET_CAPTCHA_ERR.String(), fmt.Sprintf("获取验证码失败", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_GET_CAPTCHA_ERR.String(), fmt.Sprintf("获取验证码失败", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_GET_CAPTCHA_ERR.String(), localize)
		}
	}

	return err
}

// IsCaptchaExpiredErr 验证码已失效
func IsCaptchaExpiredErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CAPTCHA_EXPIRED_ERR.String() && e.Code == 405
}

// ErrorCaptchaExpiredErr 验证码已失效
func ErrorCaptchaExpiredErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_CAPTCHA_EXPIRED_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorCaptchaExpiredErrWithContext 验证码已失效
//
//	带上下文，支持国际化输出元数据
func ErrorCaptchaExpiredErrWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_CAPTCHA_EXPIRED_ERR.String(), fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"code": func(ctx context.Context, id string) string {
			msg := GetI18nMessage(ctx, id)
			if msg != "" {
				return msg
			}
			return id
		}(ctx, "CAPTCHA_EXPIRED_ERR"),
	})
}

const ErrorI18nCaptchaExpiredErrID = "CAPTCHA_EXPIRED_ERR"

// ErrorI18nCaptchaExpiredErr 验证码已失效
//
//	支持国际化输出
func ErrorI18nCaptchaExpiredErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nCaptchaExpiredErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_CAPTCHA_EXPIRED_ERR.String(), fmt.Sprintf("验证码已过期", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_CAPTCHA_EXPIRED_ERR.String(), fmt.Sprintf("验证码已过期", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_CAPTCHA_EXPIRED_ERR.String(), localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"code": func(ctx context.Context, id string) string {
			msg := GetI18nMessage(ctx, id)
			if msg != "" {
				return msg
			}
			return id
		}(ctx, "CAPTCHA_EXPIRED_ERR"),
	})
}

// IsCaptchaErr 验证码错误
func IsCaptchaErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CAPTCHA_ERR.String() && e.Code == 405
}

// ErrorCaptchaErr 验证码错误
func ErrorCaptchaErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_CAPTCHA_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorCaptchaErrWithContext 验证码错误
//
//	带上下文，支持国际化输出元数据
func ErrorCaptchaErrWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_CAPTCHA_ERR.String(), fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"code": func(ctx context.Context, id string) string {
			msg := GetI18nMessage(ctx, id)
			if msg != "" {
				return msg
			}
			return id
		}(ctx, "CAPTCHA_ERR"),
	})
}

const ErrorI18nCaptchaErrID = "CAPTCHA_ERR"

// ErrorI18nCaptchaErr 验证码错误
//
//	支持国际化输出
func ErrorI18nCaptchaErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nCaptchaErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_CAPTCHA_ERR.String(), fmt.Sprintf("验证码错误", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_CAPTCHA_ERR.String(), fmt.Sprintf("验证码错误", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_CAPTCHA_ERR.String(), localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"code": func(ctx context.Context, id string) string {
			msg := GetI18nMessage(ctx, id)
			if msg != "" {
				return msg
			}
			return id
		}(ctx, "CAPTCHA_ERR"),
	})
}

// IsCaptchaInvalidErr 验证码无效
func IsCaptchaInvalidErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CAPTCHA_INVALID_ERR.String() && e.Code == 405
}

// ErrorCaptchaInvalidErr 验证码无效
func ErrorCaptchaInvalidErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_CAPTCHA_INVALID_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorCaptchaInvalidErrWithContext 验证码无效
//
//	带上下文，支持国际化输出元数据
func ErrorCaptchaInvalidErrWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_CAPTCHA_INVALID_ERR.String(), fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"code": func(ctx context.Context, id string) string {
			msg := GetI18nMessage(ctx, id)
			if msg != "" {
				return msg
			}
			return id
		}(ctx, "CAPTCHA_INVALID_ERR"),
	})
}

const ErrorI18nCaptchaInvalidErrID = "CAPTCHA_INVALID_ERR"

// ErrorI18nCaptchaInvalidErr 验证码无效
//
//	支持国际化输出
func ErrorI18nCaptchaInvalidErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nCaptchaInvalidErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_CAPTCHA_INVALID_ERR.String(), fmt.Sprintf("验证码无效", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_CAPTCHA_INVALID_ERR.String(), fmt.Sprintf("验证码无效", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_CAPTCHA_INVALID_ERR.String(), localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"code": func(ctx context.Context, id string) string {
			msg := GetI18nMessage(ctx, id)
			if msg != "" {
				return msg
			}
			return id
		}(ctx, "CAPTCHA_INVALID_ERR"),
	})
}

// IsMetricNotFoundErr metric指标不存在
func IsMetricNotFoundErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_METRIC_NOT_FOUND_ERR.String() && e.Code == 405
}

// ErrorMetricNotFoundErr metric指标不存在
func ErrorMetricNotFoundErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_METRIC_NOT_FOUND_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorMetricNotFoundErrWithContext metric指标不存在
//
//	带上下文，支持国际化输出元数据
func ErrorMetricNotFoundErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_METRIC_NOT_FOUND_ERR.String(), fmt.Sprintf(format, args...))
}

const ErrorI18nMetricNotFoundErrID = "METRIC_NOT_FOUND_ERR"

// ErrorI18nMetricNotFoundErr metric指标不存在
//
//	支持国际化输出
func ErrorI18nMetricNotFoundErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nMetricNotFoundErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_METRIC_NOT_FOUND_ERR.String(), fmt.Sprintf("指标不存在", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_METRIC_NOT_FOUND_ERR.String(), fmt.Sprintf("指标不存在", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_METRIC_NOT_FOUND_ERR.String(), localize)
		}
	}

	return err
}

// IsDependencyErr 依赖错误
func IsDependencyErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DEPENDENCY_ERR.String() && e.Code == 405
}

// ErrorDependencyErr 依赖错误
func ErrorDependencyErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_DEPENDENCY_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorDependencyErrWithContext 依赖错误
//
//	带上下文，支持国际化输出元数据
func ErrorDependencyErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_DEPENDENCY_ERR.String(), fmt.Sprintf(format, args...))
}

const ErrorI18nDependencyErrID = "DEPENDENCY_ERR"

// ErrorI18nDependencyErr 依赖错误
//
//	支持国际化输出
func ErrorI18nDependencyErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nDependencyErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_DEPENDENCY_ERR.String(), fmt.Sprintf("依赖错误", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_DEPENDENCY_ERR.String(), fmt.Sprintf("依赖错误", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_DEPENDENCY_ERR.String(), localize)
		}
	}

	return err
}

// IsDbConnectErr 数据库连接失败
func IsDbConnectErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DB_CONNECT_ERR.String() && e.Code == 405
}

// ErrorDbConnectErr 数据库连接失败
func ErrorDbConnectErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_DB_CONNECT_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorDbConnectErrWithContext 数据库连接失败
//
//	带上下文，支持国际化输出元数据
func ErrorDbConnectErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_DB_CONNECT_ERR.String(), fmt.Sprintf(format, args...))
}

const ErrorI18nDbConnectErrID = "DB_CONNECT_ERR"

// ErrorI18nDbConnectErr 数据库连接失败
//
//	支持国际化输出
func ErrorI18nDbConnectErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nDbConnectErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_DB_CONNECT_ERR.String(), fmt.Sprintf("数据库连接失败", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_DB_CONNECT_ERR.String(), fmt.Sprintf("数据库连接失败", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_DB_CONNECT_ERR.String(), localize)
		}
	}

	return err
}

// IsUnsupportedDatasourceTypeErr 不支持的数据源类型
func IsUnsupportedDatasourceTypeErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNSUPPORTED_DATASOURCE_TYPE_ERR.String() && e.Code == 405
}

// ErrorUnsupportedDatasourceTypeErr 不支持的数据源类型
func ErrorUnsupportedDatasourceTypeErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_UNSUPPORTED_DATASOURCE_TYPE_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorUnsupportedDatasourceTypeErrWithContext 不支持的数据源类型
//
//	带上下文，支持国际化输出元数据
func ErrorUnsupportedDatasourceTypeErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_UNSUPPORTED_DATASOURCE_TYPE_ERR.String(), fmt.Sprintf(format, args...))
}

const ErrorI18nUnsupportedDatasourceTypeErrID = "UNSUPPORTED_DATASOURCE_TYPE_ERR"

// ErrorI18nUnsupportedDatasourceTypeErr 不支持的数据源类型
//
//	支持国际化输出
func ErrorI18nUnsupportedDatasourceTypeErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nUnsupportedDatasourceTypeErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_UNSUPPORTED_DATASOURCE_TYPE_ERR.String(), fmt.Sprintf("不支持的数据源类型", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_UNSUPPORTED_DATASOURCE_TYPE_ERR.String(), fmt.Sprintf("不支持的数据源类型", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_UNSUPPORTED_DATASOURCE_TYPE_ERR.String(), localize)
		}
	}

	return err
}

// IsNoPermissionToOperateErr 请联系管理员分配权限
func IsNoPermissionToOperateErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NO_PERMISSION_TO_OPERATE_ERR.String() && e.Code == 405
}

// ErrorNoPermissionToOperateErr 请联系管理员分配权限
func ErrorNoPermissionToOperateErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_NO_PERMISSION_TO_OPERATE_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorNoPermissionToOperateErrWithContext 请联系管理员分配权限
//
//	带上下文，支持国际化输出元数据
func ErrorNoPermissionToOperateErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_NO_PERMISSION_TO_OPERATE_ERR.String(), fmt.Sprintf(format, args...))
}

const ErrorI18nNoPermissionToOperateErrID = "NO_PERMISSION_TO_OPERATE_ERR"

// ErrorI18nNoPermissionToOperateErr 请联系管理员分配权限
//
//	支持国际化输出
func ErrorI18nNoPermissionToOperateErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nNoPermissionToOperateErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_NO_PERMISSION_TO_OPERATE_ERR.String(), fmt.Sprintf("请联系管理员分配权限", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_NO_PERMISSION_TO_OPERATE_ERR.String(), fmt.Sprintf("请联系管理员分配权限", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_NO_PERMISSION_TO_OPERATE_ERR.String(), localize)
		}
	}

	return err
}

// IsParamsValidateErr 参数校验失败
func IsParamsValidateErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PARAMS_VALIDATE_ERR.String() && e.Code == 405
}

// ErrorParamsValidateErr 参数校验失败
func ErrorParamsValidateErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_PARAMS_VALIDATE_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorParamsValidateErrWithContext 参数校验失败
//
//	带上下文，支持国际化输出元数据
func ErrorParamsValidateErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_PARAMS_VALIDATE_ERR.String(), fmt.Sprintf(format, args...))
}

const ErrorI18nParamsValidateErrID = "PARAMS_VALIDATE_ERR"

// ErrorI18nParamsValidateErr 参数校验失败
//
//	支持国际化输出
func ErrorI18nParamsValidateErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nParamsValidateErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_PARAMS_VALIDATE_ERR.String(), fmt.Sprintf("参数校验失败", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_PARAMS_VALIDATE_ERR.String(), fmt.Sprintf("参数校验失败", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_PARAMS_VALIDATE_ERR.String(), localize)
		}
	}

	return err
}

// IsNoTeamErr 请创建您的团队
func IsNoTeamErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NO_TEAM_ERR.String() && e.Code == 200
}

// ErrorNoTeamErr 请创建您的团队
func ErrorNoTeamErr(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_NO_TEAM_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorNoTeamErrWithContext 请创建您的团队
//
//	带上下文，支持国际化输出元数据
func ErrorNoTeamErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_NO_TEAM_ERR.String(), fmt.Sprintf(format, args...))
}

const ErrorI18nNoTeamErrID = "NO_TEAM_ERR"

// ErrorI18nNoTeamErr 请创建您的团队
//
//	支持国际化输出
func ErrorI18nNoTeamErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nNoTeamErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(200, ErrorReason_NO_TEAM_ERR.String(), fmt.Sprintf("请创建您的团队", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(200, ErrorReason_NO_TEAM_ERR.String(), fmt.Sprintf("请创建您的团队", args...)).WithCause(err1)
		} else {
			err = errors.New(200, ErrorReason_NO_TEAM_ERR.String(), localize)
		}
	}

	return err
}

// IsDictNotFoundErr 字典不存在
func IsDictNotFoundErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DICT_NOT_FOUND_ERR.String() && e.Code == 405
}

// ErrorDictNotFoundErr 字典不存在
func ErrorDictNotFoundErr(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_DICT_NOT_FOUND_ERR.String(), fmt.Sprintf(format, args...))
}

// ErrorDictNotFoundErrWithContext 字典不存在
//
//	带上下文，支持国际化输出元数据
func ErrorDictNotFoundErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_DICT_NOT_FOUND_ERR.String(), fmt.Sprintf(format, args...))
}

const ErrorI18nDictNotFoundErrID = "DICT_NOT_FOUND_ERR"

// ErrorI18nDictNotFoundErr 字典不存在
//
//	支持国际化输出
func ErrorI18nDictNotFoundErr(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nDictNotFoundErrID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(405, ErrorReason_DICT_NOT_FOUND_ERR.String(), fmt.Sprintf("字典不存在!", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorReason_DICT_NOT_FOUND_ERR.String(), fmt.Sprintf("字典不存在!", args...)).WithCause(err1)
		} else {
			err = errors.New(405, ErrorReason_DICT_NOT_FOUND_ERR.String(), localize)
		}
	}

	return err
}
